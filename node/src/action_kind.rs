// DO NOT EDIT. GENERATED BY `node/build.rs`
//
// This file includes the [ActionKindGet] trait implementation for all action variants.
// It also defines the [ActionKind] enum that consolidates all action types.
//
// Why? As a substitute of the derive macro provided by the [enum-kinds](https://crates.io/crates/enum-kinds).
//
// This arrangement helps eliminate macro overhead while also enabling us to aggregate multiple action types
// into an single [ActionKind] enum.
// That enables uncoupling through the partitioning of actions into multiple types that get combined by a
// top-level [Action] type in a way that helps the compiler avoid the recompilation of all the actions
// related code for every single change.

use num_enum::TryFromPrimitive;
use serde::{Deserialize, Serialize};

use crate::consensus::{
    ConsensusAction, ConsensusBestTipUpdateAction, ConsensusBlockChainProofUpdateAction,
    ConsensusBlockReceivedAction, ConsensusBlockSnarkVerifyPendingAction,
    ConsensusBlockSnarkVerifySuccessAction, ConsensusDetectForkRangeAction,
    ConsensusLongRangeForkResolveAction, ConsensusShortRangeForkResolveAction,
};
use crate::event_source::{
    EventSourceAction, EventSourceNewEventAction, EventSourceProcessEventsAction,
    EventSourceWaitForEventsAction, EventSourceWaitTimeoutAction,
};
use crate::external_snark_worker::{
    ExternalSnarkWorkerAction, ExternalSnarkWorkerCancelWorkAction, ExternalSnarkWorkerErrorAction,
    ExternalSnarkWorkerKillAction, ExternalSnarkWorkerKilledAction,
    ExternalSnarkWorkerPruneWorkAction, ExternalSnarkWorkerStartAction,
    ExternalSnarkWorkerStartTimeoutAction, ExternalSnarkWorkerStartedAction,
    ExternalSnarkWorkerSubmitWorkAction, ExternalSnarkWorkerWorkCancelledAction,
    ExternalSnarkWorkerWorkErrorAction, ExternalSnarkWorkerWorkResultAction,
    ExternalSnarkWorkerWorkTimeoutAction,
};
use crate::p2p::channels::best_tip::{
    P2pChannelsBestTipAction, P2pChannelsBestTipInitAction, P2pChannelsBestTipPendingAction,
    P2pChannelsBestTipReadyAction, P2pChannelsBestTipReceivedAction,
    P2pChannelsBestTipRequestReceivedAction, P2pChannelsBestTipRequestSendAction,
    P2pChannelsBestTipResponseSendAction,
};
use crate::p2p::channels::rpc::{
    P2pChannelsRpcAction, P2pChannelsRpcInitAction, P2pChannelsRpcPendingAction,
    P2pChannelsRpcReadyAction, P2pChannelsRpcRequestReceivedAction,
    P2pChannelsRpcRequestSendAction, P2pChannelsRpcResponseReceivedAction,
    P2pChannelsRpcResponseSendAction, P2pChannelsRpcTimeoutAction,
};
use crate::p2p::channels::snark::{
    P2pChannelsSnarkAction, P2pChannelsSnarkInitAction, P2pChannelsSnarkLibp2pBroadcastAction,
    P2pChannelsSnarkLibp2pReceivedAction, P2pChannelsSnarkPendingAction,
    P2pChannelsSnarkPromiseReceivedAction, P2pChannelsSnarkReadyAction,
    P2pChannelsSnarkReceivedAction, P2pChannelsSnarkRequestReceivedAction,
    P2pChannelsSnarkRequestSendAction, P2pChannelsSnarkResponseSendAction,
};
use crate::p2p::channels::snark_job_commitment::{
    P2pChannelsSnarkJobCommitmentAction, P2pChannelsSnarkJobCommitmentInitAction,
    P2pChannelsSnarkJobCommitmentPendingAction, P2pChannelsSnarkJobCommitmentPromiseReceivedAction,
    P2pChannelsSnarkJobCommitmentReadyAction, P2pChannelsSnarkJobCommitmentReceivedAction,
    P2pChannelsSnarkJobCommitmentRequestReceivedAction,
    P2pChannelsSnarkJobCommitmentRequestSendAction,
    P2pChannelsSnarkJobCommitmentResponseSendAction,
};
use crate::p2p::channels::{P2pChannelsAction, P2pChannelsMessageReceivedAction};
use crate::p2p::connection::libp2p::incoming::{
    P2pConnectionLibP2pIncomingAction, P2pConnectionLibP2pIncomingSuccessAction,
};
use crate::p2p::connection::libp2p::outgoing::{
    P2pConnectionLibP2pOutgoingAction, P2pConnectionLibP2pOutgoingErrorAction,
    P2pConnectionLibP2pOutgoingFinalizeErrorAction,
    P2pConnectionLibP2pOutgoingFinalizePendingAction,
    P2pConnectionLibP2pOutgoingFinalizeSuccessAction,
    P2pConnectionLibP2pOutgoingFinalizeTimeoutAction, P2pConnectionLibP2pOutgoingInitAction,
    P2pConnectionLibP2pOutgoingSuccessAction,
};
use crate::p2p::connection::libp2p::P2pConnectionLibP2pAction;
use crate::p2p::connection::webrtc::incoming::{
    P2pConnectionWebRTCIncomingAction, P2pConnectionWebRTCIncomingAnswerReadyAction,
    P2pConnectionWebRTCIncomingAnswerSdpCreateErrorAction,
    P2pConnectionWebRTCIncomingAnswerSdpCreatePendingAction,
    P2pConnectionWebRTCIncomingAnswerSdpCreateSuccessAction,
    P2pConnectionWebRTCIncomingAnswerSendSuccessAction, P2pConnectionWebRTCIncomingErrorAction,
    P2pConnectionWebRTCIncomingFinalizeErrorAction,
    P2pConnectionWebRTCIncomingFinalizePendingAction,
    P2pConnectionWebRTCIncomingFinalizeSuccessAction, P2pConnectionWebRTCIncomingInitAction,
    P2pConnectionWebRTCIncomingLibp2pReceivedAction, P2pConnectionWebRTCIncomingSuccessAction,
    P2pConnectionWebRTCIncomingTimeoutAction,
};
use crate::p2p::connection::webrtc::outgoing::{
    P2pConnectionWebRTCOutgoingAction, P2pConnectionWebRTCOutgoingAnswerRecvErrorAction,
    P2pConnectionWebRTCOutgoingAnswerRecvPendingAction,
    P2pConnectionWebRTCOutgoingAnswerRecvSuccessAction, P2pConnectionWebRTCOutgoingErrorAction,
    P2pConnectionWebRTCOutgoingFinalizeErrorAction,
    P2pConnectionWebRTCOutgoingFinalizePendingAction,
    P2pConnectionWebRTCOutgoingFinalizeSuccessAction, P2pConnectionWebRTCOutgoingInitAction,
    P2pConnectionWebRTCOutgoingOfferReadyAction,
    P2pConnectionWebRTCOutgoingOfferSdpCreateErrorAction,
    P2pConnectionWebRTCOutgoingOfferSdpCreatePendingAction,
    P2pConnectionWebRTCOutgoingOfferSdpCreateSuccessAction,
    P2pConnectionWebRTCOutgoingOfferSendSuccessAction, P2pConnectionWebRTCOutgoingSuccessAction,
    P2pConnectionWebRTCOutgoingTimeoutAction,
};
use crate::p2p::connection::webrtc::P2pConnectionWebRTCAction;
use crate::p2p::connection::P2pConnectionAction;
use crate::p2p::disconnection::{
    P2pDisconnectionAction, P2pDisconnectionFinishAction, P2pDisconnectionInitAction,
};
use crate::p2p::discovery::{
    P2pDiscoveryAction, P2pDiscoveryInitAction, P2pDiscoveryKademliaAddRouteAction,
    P2pDiscoveryKademliaBootstrapAction, P2pDiscoveryKademliaFailureAction,
    P2pDiscoveryKademliaInitAction, P2pDiscoveryKademliaSuccessAction, P2pDiscoverySuccessAction,
};
use crate::p2p::listen::{
    P2pListenAction, P2pListenClosedAction, P2pListenErrorAction, P2pListenExpiredAction,
    P2pListenNewAction,
};
use crate::p2p::peer::{
    P2pPeerAction, P2pPeerAddLibP2pAction, P2pPeerAddWebRTCAction, P2pPeerBestTipUpdateAction,
    P2pPeerReadyAction, P2pPeerReconnectAction,
};
use crate::p2p::P2pAction;
use crate::rpc::{
    RpcAction, RpcActionStatsGetAction, RpcFinishAction, RpcGlobalStateGetAction,
    RpcHealthCheckAction, RpcP2pConnectionIncomingErrorAction, RpcP2pConnectionIncomingInitAction,
    RpcP2pConnectionIncomingPendingAction, RpcP2pConnectionIncomingRespondAction,
    RpcP2pConnectionIncomingSuccessAction, RpcP2pConnectionOutgoingErrorAction,
    RpcP2pConnectionOutgoingInitAction, RpcP2pConnectionOutgoingPendingAction,
    RpcP2pConnectionOutgoingSuccessAction, RpcPeersGetAction, RpcReadinessCheckAction,
    RpcScanStateSummaryGetAction, RpcSnarkPoolAvailableJobsGetAction, RpcSnarkPoolJobGetAction,
    RpcSnarkerConfigGetAction, RpcSnarkerJobCommitAction, RpcSnarkerJobSpecAction,
    RpcSnarkersWorkersGetAction, RpcSyncStatsGetAction,
};
use crate::snark::block_verify::{
    SnarkBlockVerifyAction, SnarkBlockVerifyErrorAction, SnarkBlockVerifyFinishAction,
    SnarkBlockVerifyInitAction, SnarkBlockVerifyPendingAction, SnarkBlockVerifySuccessAction,
};
use crate::snark::work_verify::{
    SnarkWorkVerifyAction, SnarkWorkVerifyErrorAction, SnarkWorkVerifyFinishAction,
    SnarkWorkVerifyInitAction, SnarkWorkVerifyPendingAction, SnarkWorkVerifySuccessAction,
};
use crate::snark::SnarkAction;
use crate::snark_pool::candidate::{
    SnarkPoolCandidateAction, SnarkPoolCandidateInfoReceivedAction,
    SnarkPoolCandidatePeerPruneAction, SnarkPoolCandidateWorkFetchAllAction,
    SnarkPoolCandidateWorkFetchInitAction, SnarkPoolCandidateWorkFetchPendingAction,
    SnarkPoolCandidateWorkReceivedAction, SnarkPoolCandidateWorkVerifyErrorAction,
    SnarkPoolCandidateWorkVerifyNextAction, SnarkPoolCandidateWorkVerifyPendingAction,
    SnarkPoolCandidateWorkVerifySuccessAction,
};
use crate::snark_pool::{
    SnarkPoolAction, SnarkPoolAutoCreateCommitmentAction, SnarkPoolCheckTimeoutsAction,
    SnarkPoolCommitmentCreateAction, SnarkPoolJobCommitmentAddAction,
    SnarkPoolJobCommitmentTimeoutAction, SnarkPoolJobsUpdateAction, SnarkPoolP2pSendAction,
    SnarkPoolP2pSendAllAction, SnarkPoolWorkAddAction,
};
use crate::transition_frontier::sync::ledger::snarked::{
    TransitionFrontierSyncLedgerSnarkedAction,
    TransitionFrontierSyncLedgerSnarkedChildAccountsReceivedAction,
    TransitionFrontierSyncLedgerSnarkedChildHashesReceivedAction,
    TransitionFrontierSyncLedgerSnarkedPeerQueryErrorAction,
    TransitionFrontierSyncLedgerSnarkedPeerQueryInitAction,
    TransitionFrontierSyncLedgerSnarkedPeerQueryPendingAction,
    TransitionFrontierSyncLedgerSnarkedPeerQueryRetryAction,
    TransitionFrontierSyncLedgerSnarkedPeerQuerySuccessAction,
    TransitionFrontierSyncLedgerSnarkedPeersQueryAction,
    TransitionFrontierSyncLedgerSnarkedPendingAction,
    TransitionFrontierSyncLedgerSnarkedSuccessAction,
};
use crate::transition_frontier::sync::ledger::staged::{
    TransitionFrontierSyncLedgerStagedAction,
    TransitionFrontierSyncLedgerStagedPartsFetchPendingAction,
    TransitionFrontierSyncLedgerStagedPartsFetchSuccessAction,
    TransitionFrontierSyncLedgerStagedPartsPeerFetchErrorAction,
    TransitionFrontierSyncLedgerStagedPartsPeerFetchInitAction,
    TransitionFrontierSyncLedgerStagedPartsPeerFetchPendingAction,
    TransitionFrontierSyncLedgerStagedPartsPeerFetchSuccessAction,
    TransitionFrontierSyncLedgerStagedPartsPeerInvalidAction,
    TransitionFrontierSyncLedgerStagedPartsPeerValidAction,
    TransitionFrontierSyncLedgerStagedReconstructEmptyAction,
    TransitionFrontierSyncLedgerStagedReconstructErrorAction,
    TransitionFrontierSyncLedgerStagedReconstructInitAction,
    TransitionFrontierSyncLedgerStagedReconstructPendingAction,
    TransitionFrontierSyncLedgerStagedReconstructSuccessAction,
    TransitionFrontierSyncLedgerStagedSuccessAction,
};
use crate::transition_frontier::sync::ledger::{
    TransitionFrontierSyncLedgerAction, TransitionFrontierSyncLedgerInitAction,
    TransitionFrontierSyncLedgerSuccessAction,
};
use crate::transition_frontier::sync::{
    TransitionFrontierSyncAction, TransitionFrontierSyncBestTipUpdateAction,
    TransitionFrontierSyncBlocksFetchSuccessAction,
    TransitionFrontierSyncBlocksNextApplyInitAction,
    TransitionFrontierSyncBlocksNextApplyPendingAction,
    TransitionFrontierSyncBlocksNextApplySuccessAction,
    TransitionFrontierSyncBlocksPeerQueryErrorAction,
    TransitionFrontierSyncBlocksPeerQueryInitAction,
    TransitionFrontierSyncBlocksPeerQueryPendingAction,
    TransitionFrontierSyncBlocksPeerQueryRetryAction,
    TransitionFrontierSyncBlocksPeerQuerySuccessAction,
    TransitionFrontierSyncBlocksPeersQueryAction, TransitionFrontierSyncBlocksPendingAction,
    TransitionFrontierSyncBlocksSuccessAction, TransitionFrontierSyncInitAction,
    TransitionFrontierSyncLedgerNextEpochPendingAction,
    TransitionFrontierSyncLedgerNextEpochSuccessAction,
    TransitionFrontierSyncLedgerRootPendingAction, TransitionFrontierSyncLedgerRootSuccessAction,
    TransitionFrontierSyncLedgerStakingPendingAction,
    TransitionFrontierSyncLedgerStakingSuccessAction,
};
use crate::transition_frontier::{TransitionFrontierAction, TransitionFrontierSyncedAction};
use crate::watched_accounts::{
    WatchedAccountsAction, WatchedAccountsAddAction, WatchedAccountsBlockLedgerQueryInitAction,
    WatchedAccountsBlockLedgerQueryPendingAction, WatchedAccountsBlockLedgerQuerySuccessAction,
    WatchedAccountsBlockTransactionsIncludedAction,
    WatchedAccountsLedgerInitialStateGetErrorAction,
    WatchedAccountsLedgerInitialStateGetInitAction,
    WatchedAccountsLedgerInitialStateGetPendingAction,
    WatchedAccountsLedgerInitialStateGetRetryAction,
    WatchedAccountsLedgerInitialStateGetSuccessAction,
};
use crate::{Action, ActionKindGet, CheckTimeoutsAction};

/// Unified kind enum for all action types
#[derive(
    Serialize, Deserialize, TryFromPrimitive, Debug, Ord, PartialOrd, Eq, PartialEq, Clone, Copy,
)]
#[repr(u16)]
pub enum ActionKind {
    None,
    CheckTimeouts,
    ConsensusBestTipUpdate,
    ConsensusBlockChainProofUpdate,
    ConsensusBlockReceived,
    ConsensusBlockSnarkVerifyPending,
    ConsensusBlockSnarkVerifySuccess,
    ConsensusDetectForkRange,
    ConsensusLongRangeForkResolve,
    ConsensusShortRangeForkResolve,
    EventSourceNewEvent,
    EventSourceProcessEvents,
    EventSourceWaitForEvents,
    EventSourceWaitTimeout,
    ExternalSnarkWorkerCancelWork,
    ExternalSnarkWorkerError,
    ExternalSnarkWorkerKill,
    ExternalSnarkWorkerKilled,
    ExternalSnarkWorkerPruneWork,
    ExternalSnarkWorkerStart,
    ExternalSnarkWorkerStartTimeout,
    ExternalSnarkWorkerStarted,
    ExternalSnarkWorkerSubmitWork,
    ExternalSnarkWorkerWorkCancelled,
    ExternalSnarkWorkerWorkError,
    ExternalSnarkWorkerWorkResult,
    ExternalSnarkWorkerWorkTimeout,
    P2pChannelsBestTipInit,
    P2pChannelsBestTipPending,
    P2pChannelsBestTipReady,
    P2pChannelsBestTipReceived,
    P2pChannelsBestTipRequestReceived,
    P2pChannelsBestTipRequestSend,
    P2pChannelsBestTipResponseSend,
    P2pChannelsMessageReceived,
    P2pChannelsRpcInit,
    P2pChannelsRpcPending,
    P2pChannelsRpcReady,
    P2pChannelsRpcRequestReceived,
    P2pChannelsRpcRequestSend,
    P2pChannelsRpcResponseReceived,
    P2pChannelsRpcResponseSend,
    P2pChannelsRpcTimeout,
    P2pChannelsSnarkInit,
    P2pChannelsSnarkJobCommitmentInit,
    P2pChannelsSnarkJobCommitmentPending,
    P2pChannelsSnarkJobCommitmentPromiseReceived,
    P2pChannelsSnarkJobCommitmentReady,
    P2pChannelsSnarkJobCommitmentReceived,
    P2pChannelsSnarkJobCommitmentRequestReceived,
    P2pChannelsSnarkJobCommitmentRequestSend,
    P2pChannelsSnarkJobCommitmentResponseSend,
    P2pChannelsSnarkLibp2pBroadcast,
    P2pChannelsSnarkLibp2pReceived,
    P2pChannelsSnarkPending,
    P2pChannelsSnarkPromiseReceived,
    P2pChannelsSnarkReady,
    P2pChannelsSnarkReceived,
    P2pChannelsSnarkRequestReceived,
    P2pChannelsSnarkRequestSend,
    P2pChannelsSnarkResponseSend,
    P2pConnectionLibP2pIncomingSuccess,
    P2pConnectionLibP2pOutgoingError,
    P2pConnectionLibP2pOutgoingFinalizeError,
    P2pConnectionLibP2pOutgoingFinalizePending,
    P2pConnectionLibP2pOutgoingFinalizeSuccess,
    P2pConnectionLibP2pOutgoingFinalizeTimeout,
    P2pConnectionLibP2pOutgoingInit,
    P2pConnectionLibP2pOutgoingSuccess,
    P2pConnectionWebRTCIncomingAnswerReady,
    P2pConnectionWebRTCIncomingAnswerSdpCreateError,
    P2pConnectionWebRTCIncomingAnswerSdpCreatePending,
    P2pConnectionWebRTCIncomingAnswerSdpCreateSuccess,
    P2pConnectionWebRTCIncomingAnswerSendSuccess,
    P2pConnectionWebRTCIncomingError,
    P2pConnectionWebRTCIncomingFinalizeError,
    P2pConnectionWebRTCIncomingFinalizePending,
    P2pConnectionWebRTCIncomingFinalizeSuccess,
    P2pConnectionWebRTCIncomingInit,
    P2pConnectionWebRTCIncomingLibp2pReceived,
    P2pConnectionWebRTCIncomingSuccess,
    P2pConnectionWebRTCIncomingTimeout,
    P2pConnectionWebRTCOutgoingAnswerRecvError,
    P2pConnectionWebRTCOutgoingAnswerRecvPending,
    P2pConnectionWebRTCOutgoingAnswerRecvSuccess,
    P2pConnectionWebRTCOutgoingError,
    P2pConnectionWebRTCOutgoingFinalizeError,
    P2pConnectionWebRTCOutgoingFinalizePending,
    P2pConnectionWebRTCOutgoingFinalizeSuccess,
    P2pConnectionWebRTCOutgoingInit,
    P2pConnectionWebRTCOutgoingOfferReady,
    P2pConnectionWebRTCOutgoingOfferSdpCreateError,
    P2pConnectionWebRTCOutgoingOfferSdpCreatePending,
    P2pConnectionWebRTCOutgoingOfferSdpCreateSuccess,
    P2pConnectionWebRTCOutgoingOfferSendSuccess,
    P2pConnectionWebRTCOutgoingSuccess,
    P2pConnectionWebRTCOutgoingTimeout,
    P2pDisconnectionFinish,
    P2pDisconnectionInit,
    P2pDiscoveryInit,
    P2pDiscoveryKademliaAddRoute,
    P2pDiscoveryKademliaBootstrap,
    P2pDiscoveryKademliaFailure,
    P2pDiscoveryKademliaInit,
    P2pDiscoveryKademliaSuccess,
    P2pDiscoverySuccess,
    P2pListenClosed,
    P2pListenError,
    P2pListenExpired,
    P2pListenNew,
    P2pPeerAddLibP2p,
    P2pPeerAddWebRTC,
    P2pPeerBestTipUpdate,
    P2pPeerReady,
    P2pPeerReconnect,
    RpcActionStatsGet,
    RpcFinish,
    RpcGlobalStateGet,
    RpcHealthCheck,
    RpcP2pConnectionIncomingError,
    RpcP2pConnectionIncomingInit,
    RpcP2pConnectionIncomingPending,
    RpcP2pConnectionIncomingRespond,
    RpcP2pConnectionIncomingSuccess,
    RpcP2pConnectionOutgoingError,
    RpcP2pConnectionOutgoingInit,
    RpcP2pConnectionOutgoingPending,
    RpcP2pConnectionOutgoingSuccess,
    RpcPeersGet,
    RpcReadinessCheck,
    RpcScanStateSummaryGet,
    RpcSnarkPoolAvailableJobsGet,
    RpcSnarkPoolJobGet,
    RpcSnarkerConfigGet,
    RpcSnarkerJobCommit,
    RpcSnarkerJobSpec,
    RpcSnarkersWorkersGet,
    RpcSyncStatsGet,
    SnarkBlockVerifyError,
    SnarkBlockVerifyFinish,
    SnarkBlockVerifyInit,
    SnarkBlockVerifyPending,
    SnarkBlockVerifySuccess,
    SnarkPoolAutoCreateCommitment,
    SnarkPoolCandidateInfoReceived,
    SnarkPoolCandidatePeerPrune,
    SnarkPoolCandidateWorkFetchAll,
    SnarkPoolCandidateWorkFetchInit,
    SnarkPoolCandidateWorkFetchPending,
    SnarkPoolCandidateWorkReceived,
    SnarkPoolCandidateWorkVerifyError,
    SnarkPoolCandidateWorkVerifyNext,
    SnarkPoolCandidateWorkVerifyPending,
    SnarkPoolCandidateWorkVerifySuccess,
    SnarkPoolCheckTimeouts,
    SnarkPoolCommitmentCreate,
    SnarkPoolJobCommitmentAdd,
    SnarkPoolJobCommitmentTimeout,
    SnarkPoolJobsUpdate,
    SnarkPoolP2pSend,
    SnarkPoolP2pSendAll,
    SnarkPoolWorkAdd,
    SnarkWorkVerifyError,
    SnarkWorkVerifyFinish,
    SnarkWorkVerifyInit,
    SnarkWorkVerifyPending,
    SnarkWorkVerifySuccess,
    TransitionFrontierSyncBestTipUpdate,
    TransitionFrontierSyncBlocksFetchSuccess,
    TransitionFrontierSyncBlocksNextApplyInit,
    TransitionFrontierSyncBlocksNextApplyPending,
    TransitionFrontierSyncBlocksNextApplySuccess,
    TransitionFrontierSyncBlocksPeerQueryError,
    TransitionFrontierSyncBlocksPeerQueryInit,
    TransitionFrontierSyncBlocksPeerQueryPending,
    TransitionFrontierSyncBlocksPeerQueryRetry,
    TransitionFrontierSyncBlocksPeerQuerySuccess,
    TransitionFrontierSyncBlocksPeersQuery,
    TransitionFrontierSyncBlocksPending,
    TransitionFrontierSyncBlocksSuccess,
    TransitionFrontierSyncInit,
    TransitionFrontierSyncLedgerInit,
    TransitionFrontierSyncLedgerNextEpochPending,
    TransitionFrontierSyncLedgerNextEpochSuccess,
    TransitionFrontierSyncLedgerRootPending,
    TransitionFrontierSyncLedgerRootSuccess,
    TransitionFrontierSyncLedgerSnarkedChildAccountsReceived,
    TransitionFrontierSyncLedgerSnarkedChildHashesReceived,
    TransitionFrontierSyncLedgerSnarkedPeerQueryError,
    TransitionFrontierSyncLedgerSnarkedPeerQueryInit,
    TransitionFrontierSyncLedgerSnarkedPeerQueryPending,
    TransitionFrontierSyncLedgerSnarkedPeerQueryRetry,
    TransitionFrontierSyncLedgerSnarkedPeerQuerySuccess,
    TransitionFrontierSyncLedgerSnarkedPeersQuery,
    TransitionFrontierSyncLedgerSnarkedPending,
    TransitionFrontierSyncLedgerSnarkedSuccess,
    TransitionFrontierSyncLedgerStagedPartsFetchPending,
    TransitionFrontierSyncLedgerStagedPartsFetchSuccess,
    TransitionFrontierSyncLedgerStagedPartsPeerFetchError,
    TransitionFrontierSyncLedgerStagedPartsPeerFetchInit,
    TransitionFrontierSyncLedgerStagedPartsPeerFetchPending,
    TransitionFrontierSyncLedgerStagedPartsPeerFetchSuccess,
    TransitionFrontierSyncLedgerStagedPartsPeerInvalid,
    TransitionFrontierSyncLedgerStagedPartsPeerValid,
    TransitionFrontierSyncLedgerStagedReconstructEmpty,
    TransitionFrontierSyncLedgerStagedReconstructError,
    TransitionFrontierSyncLedgerStagedReconstructInit,
    TransitionFrontierSyncLedgerStagedReconstructPending,
    TransitionFrontierSyncLedgerStagedReconstructSuccess,
    TransitionFrontierSyncLedgerStagedSuccess,
    TransitionFrontierSyncLedgerStakingPending,
    TransitionFrontierSyncLedgerStakingSuccess,
    TransitionFrontierSyncLedgerSuccess,
    TransitionFrontierSynced,
    WatchedAccountsAdd,
    WatchedAccountsBlockLedgerQueryInit,
    WatchedAccountsBlockLedgerQueryPending,
    WatchedAccountsBlockLedgerQuerySuccess,
    WatchedAccountsBlockTransactionsIncluded,
    WatchedAccountsLedgerInitialStateGetError,
    WatchedAccountsLedgerInitialStateGetInit,
    WatchedAccountsLedgerInitialStateGetPending,
    WatchedAccountsLedgerInitialStateGetRetry,
    WatchedAccountsLedgerInitialStateGetSuccess,
}

impl ActionKind {
    pub const COUNT: u16 = 224;
}

impl std::fmt::Display for ActionKind {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{self:?}")
    }
}

impl ActionKindGet for Action {
    fn kind(&self) -> ActionKind {
        match self {
            Self::CheckTimeouts(a) => a.kind(),
            Self::EventSource(a) => a.kind(),
            Self::P2p(a) => a.kind(),
            Self::Snark(a) => a.kind(),
            Self::Consensus(a) => a.kind(),
            Self::TransitionFrontier(a) => a.kind(),
            Self::SnarkPool(a) => a.kind(),
            Self::Rpc(a) => a.kind(),
            Self::ExternalSnarkWorker(a) => a.kind(),
            Self::WatchedAccounts(a) => a.kind(),
        }
    }
}

impl ActionKindGet for CheckTimeoutsAction {
    fn kind(&self) -> ActionKind {
        ActionKind::CheckTimeouts
    }
}

impl ActionKindGet for EventSourceAction {
    fn kind(&self) -> ActionKind {
        match self {
            Self::ProcessEvents(a) => a.kind(),
            Self::NewEvent(a) => a.kind(),
            Self::WaitForEvents(a) => a.kind(),
            Self::WaitTimeout(a) => a.kind(),
        }
    }
}

impl ActionKindGet for P2pAction {
    fn kind(&self) -> ActionKind {
        match self {
            Self::Listen(a) => a.kind(),
            Self::Connection(a) => a.kind(),
            Self::Disconnection(a) => a.kind(),
            Self::Discovery(a) => a.kind(),
            Self::Channels(a) => a.kind(),
            Self::Peer(a) => a.kind(),
        }
    }
}

impl ActionKindGet for SnarkAction {
    fn kind(&self) -> ActionKind {
        match self {
            Self::BlockVerify(a) => a.kind(),
            Self::WorkVerify(a) => a.kind(),
        }
    }
}

impl ActionKindGet for ConsensusAction {
    fn kind(&self) -> ActionKind {
        match self {
            Self::BlockReceived(a) => a.kind(),
            Self::BlockChainProofUpdate(a) => a.kind(),
            Self::BlockSnarkVerifyPending(a) => a.kind(),
            Self::BlockSnarkVerifySuccess(a) => a.kind(),
            Self::DetectForkRange(a) => a.kind(),
            Self::ShortRangeForkResolve(a) => a.kind(),
            Self::LongRangeForkResolve(a) => a.kind(),
            Self::BestTipUpdate(a) => a.kind(),
        }
    }
}

impl ActionKindGet for TransitionFrontierAction {
    fn kind(&self) -> ActionKind {
        match self {
            Self::Sync(a) => a.kind(),
            Self::Synced(a) => a.kind(),
        }
    }
}

impl ActionKindGet for SnarkPoolAction {
    fn kind(&self) -> ActionKind {
        match self {
            Self::Candidate(a) => a.kind(),
            Self::JobsUpdate(a) => a.kind(),
            Self::AutoCreateCommitment(a) => a.kind(),
            Self::CommitmentCreate(a) => a.kind(),
            Self::CommitmentAdd(a) => a.kind(),
            Self::WorkAdd(a) => a.kind(),
            Self::P2pSendAll(a) => a.kind(),
            Self::P2pSend(a) => a.kind(),
            Self::CheckTimeouts(a) => a.kind(),
            Self::JobCommitmentTimeout(a) => a.kind(),
        }
    }
}

impl ActionKindGet for RpcAction {
    fn kind(&self) -> ActionKind {
        match self {
            Self::GlobalStateGet(a) => a.kind(),
            Self::ActionStatsGet(a) => a.kind(),
            Self::SyncStatsGet(a) => a.kind(),
            Self::PeersGet(a) => a.kind(),
            Self::P2pConnectionOutgoingInit(a) => a.kind(),
            Self::P2pConnectionOutgoingPending(a) => a.kind(),
            Self::P2pConnectionOutgoingError(a) => a.kind(),
            Self::P2pConnectionOutgoingSuccess(a) => a.kind(),
            Self::P2pConnectionIncomingInit(a) => a.kind(),
            Self::P2pConnectionIncomingPending(a) => a.kind(),
            Self::P2pConnectionIncomingRespond(a) => a.kind(),
            Self::P2pConnectionIncomingError(a) => a.kind(),
            Self::P2pConnectionIncomingSuccess(a) => a.kind(),
            Self::ScanStateSummaryGet(a) => a.kind(),
            Self::SnarkPoolAvailableJobsGet(a) => a.kind(),
            Self::SnarkPoolJobGet(a) => a.kind(),
            Self::SnarkerConfigGet(a) => a.kind(),
            Self::SnarkerJobCommit(a) => a.kind(),
            Self::SnarkerJobSpec(a) => a.kind(),
            Self::SnarkerWorkersGet(a) => a.kind(),
            Self::HealthCheck(a) => a.kind(),
            Self::ReadinessCheck(a) => a.kind(),
            Self::Finish(a) => a.kind(),
        }
    }
}

impl ActionKindGet for ExternalSnarkWorkerAction {
    fn kind(&self) -> ActionKind {
        match self {
            Self::Start(a) => a.kind(),
            Self::Started(a) => a.kind(),
            Self::StartTimeout(a) => a.kind(),
            Self::Kill(a) => a.kind(),
            Self::Killed(a) => a.kind(),
            Self::SubmitWork(a) => a.kind(),
            Self::WorkResult(a) => a.kind(),
            Self::WorkError(a) => a.kind(),
            Self::WorkTimeout(a) => a.kind(),
            Self::CancelWork(a) => a.kind(),
            Self::WorkCancelled(a) => a.kind(),
            Self::PruneWork(a) => a.kind(),
            Self::Error(a) => a.kind(),
        }
    }
}

impl ActionKindGet for WatchedAccountsAction {
    fn kind(&self) -> ActionKind {
        match self {
            Self::Add(a) => a.kind(),
            Self::LedgerInitialStateGetInit(a) => a.kind(),
            Self::LedgerInitialStateGetPending(a) => a.kind(),
            Self::LedgerInitialStateGetError(a) => a.kind(),
            Self::LedgerInitialStateGetRetry(a) => a.kind(),
            Self::LedgerInitialStateGetSuccess(a) => a.kind(),
            Self::TransactionsIncludedInBlock(a) => a.kind(),
            Self::BlockLedgerQueryInit(a) => a.kind(),
            Self::BlockLedgerQueryPending(a) => a.kind(),
            Self::BlockLedgerQuerySuccess(a) => a.kind(),
        }
    }
}

impl ActionKindGet for EventSourceProcessEventsAction {
    fn kind(&self) -> ActionKind {
        ActionKind::EventSourceProcessEvents
    }
}

impl ActionKindGet for EventSourceNewEventAction {
    fn kind(&self) -> ActionKind {
        ActionKind::EventSourceNewEvent
    }
}

impl ActionKindGet for EventSourceWaitForEventsAction {
    fn kind(&self) -> ActionKind {
        ActionKind::EventSourceWaitForEvents
    }
}

impl ActionKindGet for EventSourceWaitTimeoutAction {
    fn kind(&self) -> ActionKind {
        ActionKind::EventSourceWaitTimeout
    }
}

impl ActionKindGet for P2pListenAction {
    fn kind(&self) -> ActionKind {
        match self {
            Self::New(a) => a.kind(),
            Self::Expired(a) => a.kind(),
            Self::Error(a) => a.kind(),
            Self::Closed(a) => a.kind(),
        }
    }
}

impl ActionKindGet for P2pConnectionAction {
    fn kind(&self) -> ActionKind {
        match self {
            Self::LibP2p(a) => a.kind(),
            Self::WebRTC(a) => a.kind(),
        }
    }
}

impl ActionKindGet for P2pDisconnectionAction {
    fn kind(&self) -> ActionKind {
        match self {
            Self::Init(a) => a.kind(),
            Self::Finish(a) => a.kind(),
        }
    }
}

impl ActionKindGet for P2pDiscoveryAction {
    fn kind(&self) -> ActionKind {
        match self {
            Self::Init(a) => a.kind(),
            Self::Success(a) => a.kind(),
            Self::KademliaBootstrap(a) => a.kind(),
            Self::KademliaInit(a) => a.kind(),
            Self::KademliaAddRoute(a) => a.kind(),
            Self::KademliaSuccess(a) => a.kind(),
            Self::KademliaFailure(a) => a.kind(),
        }
    }
}

impl ActionKindGet for P2pChannelsAction {
    fn kind(&self) -> ActionKind {
        match self {
            Self::MessageReceived(a) => a.kind(),
            Self::BestTip(a) => a.kind(),
            Self::Snark(a) => a.kind(),
            Self::SnarkJobCommitment(a) => a.kind(),
            Self::Rpc(a) => a.kind(),
        }
    }
}

impl ActionKindGet for P2pPeerAction {
    fn kind(&self) -> ActionKind {
        match self {
            Self::AddLibP2p(a) => a.kind(),
            Self::AddWebRTC(a) => a.kind(),
            Self::Reconnect(a) => a.kind(),
            Self::Ready(a) => a.kind(),
            Self::BestTipUpdate(a) => a.kind(),
        }
    }
}

impl ActionKindGet for SnarkBlockVerifyAction {
    fn kind(&self) -> ActionKind {
        match self {
            Self::Init(a) => a.kind(),
            Self::Pending(a) => a.kind(),
            Self::Error(a) => a.kind(),
            Self::Success(a) => a.kind(),
            Self::Finish(a) => a.kind(),
        }
    }
}

impl ActionKindGet for SnarkWorkVerifyAction {
    fn kind(&self) -> ActionKind {
        match self {
            Self::Init(a) => a.kind(),
            Self::Pending(a) => a.kind(),
            Self::Error(a) => a.kind(),
            Self::Success(a) => a.kind(),
            Self::Finish(a) => a.kind(),
        }
    }
}

impl ActionKindGet for ConsensusBlockReceivedAction {
    fn kind(&self) -> ActionKind {
        ActionKind::ConsensusBlockReceived
    }
}

impl ActionKindGet for ConsensusBlockChainProofUpdateAction {
    fn kind(&self) -> ActionKind {
        ActionKind::ConsensusBlockChainProofUpdate
    }
}

impl ActionKindGet for ConsensusBlockSnarkVerifyPendingAction {
    fn kind(&self) -> ActionKind {
        ActionKind::ConsensusBlockSnarkVerifyPending
    }
}

impl ActionKindGet for ConsensusBlockSnarkVerifySuccessAction {
    fn kind(&self) -> ActionKind {
        ActionKind::ConsensusBlockSnarkVerifySuccess
    }
}

impl ActionKindGet for ConsensusDetectForkRangeAction {
    fn kind(&self) -> ActionKind {
        ActionKind::ConsensusDetectForkRange
    }
}

impl ActionKindGet for ConsensusShortRangeForkResolveAction {
    fn kind(&self) -> ActionKind {
        ActionKind::ConsensusShortRangeForkResolve
    }
}

impl ActionKindGet for ConsensusLongRangeForkResolveAction {
    fn kind(&self) -> ActionKind {
        ActionKind::ConsensusLongRangeForkResolve
    }
}

impl ActionKindGet for ConsensusBestTipUpdateAction {
    fn kind(&self) -> ActionKind {
        ActionKind::ConsensusBestTipUpdate
    }
}

impl ActionKindGet for TransitionFrontierSyncAction {
    fn kind(&self) -> ActionKind {
        match self {
            Self::Init(a) => a.kind(),
            Self::BestTipUpdate(a) => a.kind(),
            Self::LedgerStakingPending(a) => a.kind(),
            Self::LedgerStakingSuccess(a) => a.kind(),
            Self::LedgerNextEpochPending(a) => a.kind(),
            Self::LedgerNextEpochSuccess(a) => a.kind(),
            Self::LedgerRootPending(a) => a.kind(),
            Self::LedgerRootSuccess(a) => a.kind(),
            Self::BlocksPending(a) => a.kind(),
            Self::BlocksPeersQuery(a) => a.kind(),
            Self::BlocksPeerQueryInit(a) => a.kind(),
            Self::BlocksPeerQueryRetry(a) => a.kind(),
            Self::BlocksPeerQueryPending(a) => a.kind(),
            Self::BlocksPeerQueryError(a) => a.kind(),
            Self::BlocksPeerQuerySuccess(a) => a.kind(),
            Self::BlocksFetchSuccess(a) => a.kind(),
            Self::BlocksNextApplyInit(a) => a.kind(),
            Self::BlocksNextApplyPending(a) => a.kind(),
            Self::BlocksNextApplySuccess(a) => a.kind(),
            Self::BlocksSuccess(a) => a.kind(),
            Self::Ledger(a) => a.kind(),
        }
    }
}

impl ActionKindGet for TransitionFrontierSyncedAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSynced
    }
}

impl ActionKindGet for SnarkPoolCandidateAction {
    fn kind(&self) -> ActionKind {
        match self {
            Self::InfoReceived(a) => a.kind(),
            Self::WorkFetchAll(a) => a.kind(),
            Self::WorkFetchInit(a) => a.kind(),
            Self::WorkFetchPending(a) => a.kind(),
            Self::WorkReceived(a) => a.kind(),
            Self::WorkVerifyNext(a) => a.kind(),
            Self::WorkVerifyPending(a) => a.kind(),
            Self::WorkVerifyError(a) => a.kind(),
            Self::WorkVerifySuccess(a) => a.kind(),
            Self::PeerPrune(a) => a.kind(),
        }
    }
}

impl ActionKindGet for SnarkPoolJobsUpdateAction {
    fn kind(&self) -> ActionKind {
        ActionKind::SnarkPoolJobsUpdate
    }
}

impl ActionKindGet for SnarkPoolAutoCreateCommitmentAction {
    fn kind(&self) -> ActionKind {
        ActionKind::SnarkPoolAutoCreateCommitment
    }
}

impl ActionKindGet for SnarkPoolCommitmentCreateAction {
    fn kind(&self) -> ActionKind {
        ActionKind::SnarkPoolCommitmentCreate
    }
}

impl ActionKindGet for SnarkPoolJobCommitmentAddAction {
    fn kind(&self) -> ActionKind {
        ActionKind::SnarkPoolJobCommitmentAdd
    }
}

impl ActionKindGet for SnarkPoolWorkAddAction {
    fn kind(&self) -> ActionKind {
        ActionKind::SnarkPoolWorkAdd
    }
}

impl ActionKindGet for SnarkPoolP2pSendAllAction {
    fn kind(&self) -> ActionKind {
        ActionKind::SnarkPoolP2pSendAll
    }
}

impl ActionKindGet for SnarkPoolP2pSendAction {
    fn kind(&self) -> ActionKind {
        ActionKind::SnarkPoolP2pSend
    }
}

impl ActionKindGet for SnarkPoolCheckTimeoutsAction {
    fn kind(&self) -> ActionKind {
        ActionKind::SnarkPoolCheckTimeouts
    }
}

impl ActionKindGet for SnarkPoolJobCommitmentTimeoutAction {
    fn kind(&self) -> ActionKind {
        ActionKind::SnarkPoolJobCommitmentTimeout
    }
}

impl ActionKindGet for RpcGlobalStateGetAction {
    fn kind(&self) -> ActionKind {
        ActionKind::RpcGlobalStateGet
    }
}

impl ActionKindGet for RpcActionStatsGetAction {
    fn kind(&self) -> ActionKind {
        ActionKind::RpcActionStatsGet
    }
}

impl ActionKindGet for RpcSyncStatsGetAction {
    fn kind(&self) -> ActionKind {
        ActionKind::RpcSyncStatsGet
    }
}

impl ActionKindGet for RpcPeersGetAction {
    fn kind(&self) -> ActionKind {
        ActionKind::RpcPeersGet
    }
}

impl ActionKindGet for RpcP2pConnectionOutgoingInitAction {
    fn kind(&self) -> ActionKind {
        ActionKind::RpcP2pConnectionOutgoingInit
    }
}

impl ActionKindGet for RpcP2pConnectionOutgoingPendingAction {
    fn kind(&self) -> ActionKind {
        ActionKind::RpcP2pConnectionOutgoingPending
    }
}

impl ActionKindGet for RpcP2pConnectionOutgoingErrorAction {
    fn kind(&self) -> ActionKind {
        ActionKind::RpcP2pConnectionOutgoingError
    }
}

impl ActionKindGet for RpcP2pConnectionOutgoingSuccessAction {
    fn kind(&self) -> ActionKind {
        ActionKind::RpcP2pConnectionOutgoingSuccess
    }
}

impl ActionKindGet for RpcP2pConnectionIncomingInitAction {
    fn kind(&self) -> ActionKind {
        ActionKind::RpcP2pConnectionIncomingInit
    }
}

impl ActionKindGet for RpcP2pConnectionIncomingPendingAction {
    fn kind(&self) -> ActionKind {
        ActionKind::RpcP2pConnectionIncomingPending
    }
}

impl ActionKindGet for RpcP2pConnectionIncomingRespondAction {
    fn kind(&self) -> ActionKind {
        ActionKind::RpcP2pConnectionIncomingRespond
    }
}

impl ActionKindGet for RpcP2pConnectionIncomingErrorAction {
    fn kind(&self) -> ActionKind {
        ActionKind::RpcP2pConnectionIncomingError
    }
}

impl ActionKindGet for RpcP2pConnectionIncomingSuccessAction {
    fn kind(&self) -> ActionKind {
        ActionKind::RpcP2pConnectionIncomingSuccess
    }
}

impl ActionKindGet for RpcScanStateSummaryGetAction {
    fn kind(&self) -> ActionKind {
        ActionKind::RpcScanStateSummaryGet
    }
}

impl ActionKindGet for RpcSnarkPoolAvailableJobsGetAction {
    fn kind(&self) -> ActionKind {
        ActionKind::RpcSnarkPoolAvailableJobsGet
    }
}

impl ActionKindGet for RpcSnarkPoolJobGetAction {
    fn kind(&self) -> ActionKind {
        ActionKind::RpcSnarkPoolJobGet
    }
}

impl ActionKindGet for RpcSnarkerConfigGetAction {
    fn kind(&self) -> ActionKind {
        ActionKind::RpcSnarkerConfigGet
    }
}

impl ActionKindGet for RpcSnarkerJobCommitAction {
    fn kind(&self) -> ActionKind {
        ActionKind::RpcSnarkerJobCommit
    }
}

impl ActionKindGet for RpcSnarkerJobSpecAction {
    fn kind(&self) -> ActionKind {
        ActionKind::RpcSnarkerJobSpec
    }
}

impl ActionKindGet for RpcSnarkersWorkersGetAction {
    fn kind(&self) -> ActionKind {
        ActionKind::RpcSnarkersWorkersGet
    }
}

impl ActionKindGet for RpcHealthCheckAction {
    fn kind(&self) -> ActionKind {
        ActionKind::RpcHealthCheck
    }
}

impl ActionKindGet for RpcReadinessCheckAction {
    fn kind(&self) -> ActionKind {
        ActionKind::RpcReadinessCheck
    }
}

impl ActionKindGet for RpcFinishAction {
    fn kind(&self) -> ActionKind {
        ActionKind::RpcFinish
    }
}

impl ActionKindGet for ExternalSnarkWorkerStartAction {
    fn kind(&self) -> ActionKind {
        ActionKind::ExternalSnarkWorkerStart
    }
}

impl ActionKindGet for ExternalSnarkWorkerStartedAction {
    fn kind(&self) -> ActionKind {
        ActionKind::ExternalSnarkWorkerStarted
    }
}

impl ActionKindGet for ExternalSnarkWorkerStartTimeoutAction {
    fn kind(&self) -> ActionKind {
        ActionKind::ExternalSnarkWorkerStartTimeout
    }
}

impl ActionKindGet for ExternalSnarkWorkerKillAction {
    fn kind(&self) -> ActionKind {
        ActionKind::ExternalSnarkWorkerKill
    }
}

impl ActionKindGet for ExternalSnarkWorkerKilledAction {
    fn kind(&self) -> ActionKind {
        ActionKind::ExternalSnarkWorkerKilled
    }
}

impl ActionKindGet for ExternalSnarkWorkerSubmitWorkAction {
    fn kind(&self) -> ActionKind {
        ActionKind::ExternalSnarkWorkerSubmitWork
    }
}

impl ActionKindGet for ExternalSnarkWorkerWorkResultAction {
    fn kind(&self) -> ActionKind {
        ActionKind::ExternalSnarkWorkerWorkResult
    }
}

impl ActionKindGet for ExternalSnarkWorkerWorkErrorAction {
    fn kind(&self) -> ActionKind {
        ActionKind::ExternalSnarkWorkerWorkError
    }
}

impl ActionKindGet for ExternalSnarkWorkerWorkTimeoutAction {
    fn kind(&self) -> ActionKind {
        ActionKind::ExternalSnarkWorkerWorkTimeout
    }
}

impl ActionKindGet for ExternalSnarkWorkerCancelWorkAction {
    fn kind(&self) -> ActionKind {
        ActionKind::ExternalSnarkWorkerCancelWork
    }
}

impl ActionKindGet for ExternalSnarkWorkerWorkCancelledAction {
    fn kind(&self) -> ActionKind {
        ActionKind::ExternalSnarkWorkerWorkCancelled
    }
}

impl ActionKindGet for ExternalSnarkWorkerPruneWorkAction {
    fn kind(&self) -> ActionKind {
        ActionKind::ExternalSnarkWorkerPruneWork
    }
}

impl ActionKindGet for ExternalSnarkWorkerErrorAction {
    fn kind(&self) -> ActionKind {
        ActionKind::ExternalSnarkWorkerError
    }
}

impl ActionKindGet for WatchedAccountsAddAction {
    fn kind(&self) -> ActionKind {
        ActionKind::WatchedAccountsAdd
    }
}

impl ActionKindGet for WatchedAccountsLedgerInitialStateGetInitAction {
    fn kind(&self) -> ActionKind {
        ActionKind::WatchedAccountsLedgerInitialStateGetInit
    }
}

impl ActionKindGet for WatchedAccountsLedgerInitialStateGetPendingAction {
    fn kind(&self) -> ActionKind {
        ActionKind::WatchedAccountsLedgerInitialStateGetPending
    }
}

impl ActionKindGet for WatchedAccountsLedgerInitialStateGetErrorAction {
    fn kind(&self) -> ActionKind {
        ActionKind::WatchedAccountsLedgerInitialStateGetError
    }
}

impl ActionKindGet for WatchedAccountsLedgerInitialStateGetRetryAction {
    fn kind(&self) -> ActionKind {
        ActionKind::WatchedAccountsLedgerInitialStateGetRetry
    }
}

impl ActionKindGet for WatchedAccountsLedgerInitialStateGetSuccessAction {
    fn kind(&self) -> ActionKind {
        ActionKind::WatchedAccountsLedgerInitialStateGetSuccess
    }
}

impl ActionKindGet for WatchedAccountsBlockTransactionsIncludedAction {
    fn kind(&self) -> ActionKind {
        ActionKind::WatchedAccountsBlockTransactionsIncluded
    }
}

impl ActionKindGet for WatchedAccountsBlockLedgerQueryInitAction {
    fn kind(&self) -> ActionKind {
        ActionKind::WatchedAccountsBlockLedgerQueryInit
    }
}

impl ActionKindGet for WatchedAccountsBlockLedgerQueryPendingAction {
    fn kind(&self) -> ActionKind {
        ActionKind::WatchedAccountsBlockLedgerQueryPending
    }
}

impl ActionKindGet for WatchedAccountsBlockLedgerQuerySuccessAction {
    fn kind(&self) -> ActionKind {
        ActionKind::WatchedAccountsBlockLedgerQuerySuccess
    }
}

impl ActionKindGet for P2pListenNewAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pListenNew
    }
}

impl ActionKindGet for P2pListenExpiredAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pListenExpired
    }
}

impl ActionKindGet for P2pListenErrorAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pListenError
    }
}

impl ActionKindGet for P2pListenClosedAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pListenClosed
    }
}

impl ActionKindGet for P2pConnectionLibP2pAction {
    fn kind(&self) -> ActionKind {
        match self {
            Self::Outgoing(a) => a.kind(),
            Self::Incoming(a) => a.kind(),
        }
    }
}

impl ActionKindGet for P2pConnectionWebRTCAction {
    fn kind(&self) -> ActionKind {
        match self {
            Self::Outgoing(a) => a.kind(),
            Self::Incoming(a) => a.kind(),
        }
    }
}

impl ActionKindGet for P2pDisconnectionInitAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pDisconnectionInit
    }
}

impl ActionKindGet for P2pDisconnectionFinishAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pDisconnectionFinish
    }
}

impl ActionKindGet for P2pDiscoveryInitAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pDiscoveryInit
    }
}

impl ActionKindGet for P2pDiscoverySuccessAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pDiscoverySuccess
    }
}

impl ActionKindGet for P2pDiscoveryKademliaBootstrapAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pDiscoveryKademliaBootstrap
    }
}

impl ActionKindGet for P2pDiscoveryKademliaInitAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pDiscoveryKademliaInit
    }
}

impl ActionKindGet for P2pDiscoveryKademliaAddRouteAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pDiscoveryKademliaAddRoute
    }
}

impl ActionKindGet for P2pDiscoveryKademliaSuccessAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pDiscoveryKademliaSuccess
    }
}

impl ActionKindGet for P2pDiscoveryKademliaFailureAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pDiscoveryKademliaFailure
    }
}

impl ActionKindGet for P2pChannelsMessageReceivedAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pChannelsMessageReceived
    }
}

impl ActionKindGet for P2pChannelsBestTipAction {
    fn kind(&self) -> ActionKind {
        match self {
            Self::Init(a) => a.kind(),
            Self::Pending(a) => a.kind(),
            Self::Ready(a) => a.kind(),
            Self::RequestSend(a) => a.kind(),
            Self::Received(a) => a.kind(),
            Self::RequestReceived(a) => a.kind(),
            Self::ResponseSend(a) => a.kind(),
        }
    }
}

impl ActionKindGet for P2pChannelsSnarkAction {
    fn kind(&self) -> ActionKind {
        match self {
            Self::Init(a) => a.kind(),
            Self::Pending(a) => a.kind(),
            Self::Ready(a) => a.kind(),
            Self::RequestSend(a) => a.kind(),
            Self::PromiseReceived(a) => a.kind(),
            Self::Received(a) => a.kind(),
            Self::RequestReceived(a) => a.kind(),
            Self::ResponseSend(a) => a.kind(),
            Self::Libp2pReceived(a) => a.kind(),
            Self::Libp2pBroadcast(a) => a.kind(),
        }
    }
}

impl ActionKindGet for P2pChannelsSnarkJobCommitmentAction {
    fn kind(&self) -> ActionKind {
        match self {
            Self::Init(a) => a.kind(),
            Self::Pending(a) => a.kind(),
            Self::Ready(a) => a.kind(),
            Self::RequestSend(a) => a.kind(),
            Self::PromiseReceived(a) => a.kind(),
            Self::Received(a) => a.kind(),
            Self::RequestReceived(a) => a.kind(),
            Self::ResponseSend(a) => a.kind(),
        }
    }
}

impl ActionKindGet for P2pChannelsRpcAction {
    fn kind(&self) -> ActionKind {
        match self {
            Self::Init(a) => a.kind(),
            Self::Pending(a) => a.kind(),
            Self::Ready(a) => a.kind(),
            Self::RequestSend(a) => a.kind(),
            Self::Timeout(a) => a.kind(),
            Self::ResponseReceived(a) => a.kind(),
            Self::RequestReceived(a) => a.kind(),
            Self::ResponseSend(a) => a.kind(),
        }
    }
}

impl ActionKindGet for P2pPeerAddLibP2pAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pPeerAddLibP2p
    }
}

impl ActionKindGet for P2pPeerAddWebRTCAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pPeerAddWebRTC
    }
}

impl ActionKindGet for P2pPeerReconnectAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pPeerReconnect
    }
}

impl ActionKindGet for P2pPeerReadyAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pPeerReady
    }
}

impl ActionKindGet for P2pPeerBestTipUpdateAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pPeerBestTipUpdate
    }
}

impl ActionKindGet for SnarkBlockVerifyInitAction {
    fn kind(&self) -> ActionKind {
        ActionKind::SnarkBlockVerifyInit
    }
}

impl ActionKindGet for SnarkBlockVerifyPendingAction {
    fn kind(&self) -> ActionKind {
        ActionKind::SnarkBlockVerifyPending
    }
}

impl ActionKindGet for SnarkBlockVerifyErrorAction {
    fn kind(&self) -> ActionKind {
        ActionKind::SnarkBlockVerifyError
    }
}

impl ActionKindGet for SnarkBlockVerifySuccessAction {
    fn kind(&self) -> ActionKind {
        ActionKind::SnarkBlockVerifySuccess
    }
}

impl ActionKindGet for SnarkBlockVerifyFinishAction {
    fn kind(&self) -> ActionKind {
        ActionKind::SnarkBlockVerifyFinish
    }
}

impl ActionKindGet for SnarkWorkVerifyInitAction {
    fn kind(&self) -> ActionKind {
        ActionKind::SnarkWorkVerifyInit
    }
}

impl ActionKindGet for SnarkWorkVerifyPendingAction {
    fn kind(&self) -> ActionKind {
        ActionKind::SnarkWorkVerifyPending
    }
}

impl ActionKindGet for SnarkWorkVerifyErrorAction {
    fn kind(&self) -> ActionKind {
        ActionKind::SnarkWorkVerifyError
    }
}

impl ActionKindGet for SnarkWorkVerifySuccessAction {
    fn kind(&self) -> ActionKind {
        ActionKind::SnarkWorkVerifySuccess
    }
}

impl ActionKindGet for SnarkWorkVerifyFinishAction {
    fn kind(&self) -> ActionKind {
        ActionKind::SnarkWorkVerifyFinish
    }
}

impl ActionKindGet for TransitionFrontierSyncInitAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncInit
    }
}

impl ActionKindGet for TransitionFrontierSyncBestTipUpdateAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncBestTipUpdate
    }
}

impl ActionKindGet for TransitionFrontierSyncLedgerStakingPendingAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncLedgerStakingPending
    }
}

impl ActionKindGet for TransitionFrontierSyncLedgerStakingSuccessAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncLedgerStakingSuccess
    }
}

impl ActionKindGet for TransitionFrontierSyncLedgerNextEpochPendingAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncLedgerNextEpochPending
    }
}

impl ActionKindGet for TransitionFrontierSyncLedgerNextEpochSuccessAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncLedgerNextEpochSuccess
    }
}

impl ActionKindGet for TransitionFrontierSyncLedgerRootPendingAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncLedgerRootPending
    }
}

impl ActionKindGet for TransitionFrontierSyncLedgerRootSuccessAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncLedgerRootSuccess
    }
}

impl ActionKindGet for TransitionFrontierSyncBlocksPendingAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncBlocksPending
    }
}

impl ActionKindGet for TransitionFrontierSyncBlocksPeersQueryAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncBlocksPeersQuery
    }
}

impl ActionKindGet for TransitionFrontierSyncBlocksPeerQueryInitAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncBlocksPeerQueryInit
    }
}

impl ActionKindGet for TransitionFrontierSyncBlocksPeerQueryRetryAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncBlocksPeerQueryRetry
    }
}

impl ActionKindGet for TransitionFrontierSyncBlocksPeerQueryPendingAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncBlocksPeerQueryPending
    }
}

impl ActionKindGet for TransitionFrontierSyncBlocksPeerQueryErrorAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncBlocksPeerQueryError
    }
}

impl ActionKindGet for TransitionFrontierSyncBlocksPeerQuerySuccessAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncBlocksPeerQuerySuccess
    }
}

impl ActionKindGet for TransitionFrontierSyncBlocksFetchSuccessAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncBlocksFetchSuccess
    }
}

impl ActionKindGet for TransitionFrontierSyncBlocksNextApplyInitAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncBlocksNextApplyInit
    }
}

impl ActionKindGet for TransitionFrontierSyncBlocksNextApplyPendingAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncBlocksNextApplyPending
    }
}

impl ActionKindGet for TransitionFrontierSyncBlocksNextApplySuccessAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncBlocksNextApplySuccess
    }
}

impl ActionKindGet for TransitionFrontierSyncBlocksSuccessAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncBlocksSuccess
    }
}

impl ActionKindGet for TransitionFrontierSyncLedgerAction {
    fn kind(&self) -> ActionKind {
        match self {
            Self::Init(a) => a.kind(),
            Self::Snarked(a) => a.kind(),
            Self::Staged(a) => a.kind(),
            Self::Success(a) => a.kind(),
        }
    }
}

impl ActionKindGet for SnarkPoolCandidateInfoReceivedAction {
    fn kind(&self) -> ActionKind {
        ActionKind::SnarkPoolCandidateInfoReceived
    }
}

impl ActionKindGet for SnarkPoolCandidateWorkFetchAllAction {
    fn kind(&self) -> ActionKind {
        ActionKind::SnarkPoolCandidateWorkFetchAll
    }
}

impl ActionKindGet for SnarkPoolCandidateWorkFetchInitAction {
    fn kind(&self) -> ActionKind {
        ActionKind::SnarkPoolCandidateWorkFetchInit
    }
}

impl ActionKindGet for SnarkPoolCandidateWorkFetchPendingAction {
    fn kind(&self) -> ActionKind {
        ActionKind::SnarkPoolCandidateWorkFetchPending
    }
}

impl ActionKindGet for SnarkPoolCandidateWorkReceivedAction {
    fn kind(&self) -> ActionKind {
        ActionKind::SnarkPoolCandidateWorkReceived
    }
}

impl ActionKindGet for SnarkPoolCandidateWorkVerifyNextAction {
    fn kind(&self) -> ActionKind {
        ActionKind::SnarkPoolCandidateWorkVerifyNext
    }
}

impl ActionKindGet for SnarkPoolCandidateWorkVerifyPendingAction {
    fn kind(&self) -> ActionKind {
        ActionKind::SnarkPoolCandidateWorkVerifyPending
    }
}

impl ActionKindGet for SnarkPoolCandidateWorkVerifyErrorAction {
    fn kind(&self) -> ActionKind {
        ActionKind::SnarkPoolCandidateWorkVerifyError
    }
}

impl ActionKindGet for SnarkPoolCandidateWorkVerifySuccessAction {
    fn kind(&self) -> ActionKind {
        ActionKind::SnarkPoolCandidateWorkVerifySuccess
    }
}

impl ActionKindGet for SnarkPoolCandidatePeerPruneAction {
    fn kind(&self) -> ActionKind {
        ActionKind::SnarkPoolCandidatePeerPrune
    }
}

impl ActionKindGet for P2pConnectionLibP2pOutgoingAction {
    fn kind(&self) -> ActionKind {
        match self {
            Self::Init(a) => a.kind(),
            Self::FinalizePending(a) => a.kind(),
            Self::FinalizeSuccess(a) => a.kind(),
            Self::FinalizeError(a) => a.kind(),
            Self::FinalizeTimeout(a) => a.kind(),
            Self::Success(a) => a.kind(),
            Self::Error(a) => a.kind(),
        }
    }
}

impl ActionKindGet for P2pConnectionLibP2pIncomingAction {
    fn kind(&self) -> ActionKind {
        match self {
            Self::Success(a) => a.kind(),
        }
    }
}

impl ActionKindGet for P2pConnectionWebRTCOutgoingAction {
    fn kind(&self) -> ActionKind {
        match self {
            Self::Init(a) => a.kind(),
            Self::OfferSdpCreatePending(a) => a.kind(),
            Self::OfferSdpCreateError(a) => a.kind(),
            Self::OfferSdpCreateSuccess(a) => a.kind(),
            Self::OfferReady(a) => a.kind(),
            Self::OfferSendSuccess(a) => a.kind(),
            Self::AnswerRecvPending(a) => a.kind(),
            Self::AnswerRecvError(a) => a.kind(),
            Self::AnswerRecvSuccess(a) => a.kind(),
            Self::FinalizePending(a) => a.kind(),
            Self::FinalizeError(a) => a.kind(),
            Self::FinalizeSuccess(a) => a.kind(),
            Self::Timeout(a) => a.kind(),
            Self::Error(a) => a.kind(),
            Self::Success(a) => a.kind(),
        }
    }
}

impl ActionKindGet for P2pConnectionWebRTCIncomingAction {
    fn kind(&self) -> ActionKind {
        match self {
            Self::Init(a) => a.kind(),
            Self::AnswerSdpCreatePending(a) => a.kind(),
            Self::AnswerSdpCreateError(a) => a.kind(),
            Self::AnswerSdpCreateSuccess(a) => a.kind(),
            Self::AnswerReady(a) => a.kind(),
            Self::AnswerSendSuccess(a) => a.kind(),
            Self::FinalizePending(a) => a.kind(),
            Self::FinalizeError(a) => a.kind(),
            Self::FinalizeSuccess(a) => a.kind(),
            Self::Timeout(a) => a.kind(),
            Self::Error(a) => a.kind(),
            Self::Success(a) => a.kind(),
            Self::Libp2pReceived(a) => a.kind(),
        }
    }
}

impl ActionKindGet for P2pChannelsBestTipInitAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pChannelsBestTipInit
    }
}

impl ActionKindGet for P2pChannelsBestTipPendingAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pChannelsBestTipPending
    }
}

impl ActionKindGet for P2pChannelsBestTipReadyAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pChannelsBestTipReady
    }
}

impl ActionKindGet for P2pChannelsBestTipRequestSendAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pChannelsBestTipRequestSend
    }
}

impl ActionKindGet for P2pChannelsBestTipReceivedAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pChannelsBestTipReceived
    }
}

impl ActionKindGet for P2pChannelsBestTipRequestReceivedAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pChannelsBestTipRequestReceived
    }
}

impl ActionKindGet for P2pChannelsBestTipResponseSendAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pChannelsBestTipResponseSend
    }
}

impl ActionKindGet for P2pChannelsSnarkInitAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pChannelsSnarkInit
    }
}

impl ActionKindGet for P2pChannelsSnarkPendingAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pChannelsSnarkPending
    }
}

impl ActionKindGet for P2pChannelsSnarkReadyAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pChannelsSnarkReady
    }
}

impl ActionKindGet for P2pChannelsSnarkRequestSendAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pChannelsSnarkRequestSend
    }
}

impl ActionKindGet for P2pChannelsSnarkPromiseReceivedAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pChannelsSnarkPromiseReceived
    }
}

impl ActionKindGet for P2pChannelsSnarkReceivedAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pChannelsSnarkReceived
    }
}

impl ActionKindGet for P2pChannelsSnarkRequestReceivedAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pChannelsSnarkRequestReceived
    }
}

impl ActionKindGet for P2pChannelsSnarkResponseSendAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pChannelsSnarkResponseSend
    }
}

impl ActionKindGet for P2pChannelsSnarkLibp2pReceivedAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pChannelsSnarkLibp2pReceived
    }
}

impl ActionKindGet for P2pChannelsSnarkLibp2pBroadcastAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pChannelsSnarkLibp2pBroadcast
    }
}

impl ActionKindGet for P2pChannelsSnarkJobCommitmentInitAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pChannelsSnarkJobCommitmentInit
    }
}

impl ActionKindGet for P2pChannelsSnarkJobCommitmentPendingAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pChannelsSnarkJobCommitmentPending
    }
}

impl ActionKindGet for P2pChannelsSnarkJobCommitmentReadyAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pChannelsSnarkJobCommitmentReady
    }
}

impl ActionKindGet for P2pChannelsSnarkJobCommitmentRequestSendAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pChannelsSnarkJobCommitmentRequestSend
    }
}

impl ActionKindGet for P2pChannelsSnarkJobCommitmentPromiseReceivedAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pChannelsSnarkJobCommitmentPromiseReceived
    }
}

impl ActionKindGet for P2pChannelsSnarkJobCommitmentReceivedAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pChannelsSnarkJobCommitmentReceived
    }
}

impl ActionKindGet for P2pChannelsSnarkJobCommitmentRequestReceivedAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pChannelsSnarkJobCommitmentRequestReceived
    }
}

impl ActionKindGet for P2pChannelsSnarkJobCommitmentResponseSendAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pChannelsSnarkJobCommitmentResponseSend
    }
}

impl ActionKindGet for P2pChannelsRpcInitAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pChannelsRpcInit
    }
}

impl ActionKindGet for P2pChannelsRpcPendingAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pChannelsRpcPending
    }
}

impl ActionKindGet for P2pChannelsRpcReadyAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pChannelsRpcReady
    }
}

impl ActionKindGet for P2pChannelsRpcRequestSendAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pChannelsRpcRequestSend
    }
}

impl ActionKindGet for P2pChannelsRpcTimeoutAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pChannelsRpcTimeout
    }
}

impl ActionKindGet for P2pChannelsRpcResponseReceivedAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pChannelsRpcResponseReceived
    }
}

impl ActionKindGet for P2pChannelsRpcRequestReceivedAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pChannelsRpcRequestReceived
    }
}

impl ActionKindGet for P2pChannelsRpcResponseSendAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pChannelsRpcResponseSend
    }
}

impl ActionKindGet for TransitionFrontierSyncLedgerInitAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncLedgerInit
    }
}

impl ActionKindGet for TransitionFrontierSyncLedgerSnarkedAction {
    fn kind(&self) -> ActionKind {
        match self {
            Self::Pending(a) => a.kind(),
            Self::PeersQuery(a) => a.kind(),
            Self::PeerQueryInit(a) => a.kind(),
            Self::PeerQueryPending(a) => a.kind(),
            Self::PeerQueryRetry(a) => a.kind(),
            Self::PeerQueryError(a) => a.kind(),
            Self::PeerQuerySuccess(a) => a.kind(),
            Self::ChildHashesReceived(a) => a.kind(),
            Self::ChildAccountsReceived(a) => a.kind(),
            Self::Success(a) => a.kind(),
        }
    }
}

impl ActionKindGet for TransitionFrontierSyncLedgerStagedAction {
    fn kind(&self) -> ActionKind {
        match self {
            Self::PartsFetchPending(a) => a.kind(),
            Self::PartsPeerFetchInit(a) => a.kind(),
            Self::PartsPeerFetchPending(a) => a.kind(),
            Self::PartsPeerFetchError(a) => a.kind(),
            Self::PartsPeerFetchSuccess(a) => a.kind(),
            Self::PartsPeerInvalid(a) => a.kind(),
            Self::PartsPeerValid(a) => a.kind(),
            Self::PartsFetchSuccess(a) => a.kind(),
            Self::ReconstructEmpty(a) => a.kind(),
            Self::ReconstructInit(a) => a.kind(),
            Self::ReconstructPending(a) => a.kind(),
            Self::ReconstructError(a) => a.kind(),
            Self::ReconstructSuccess(a) => a.kind(),
            Self::Success(a) => a.kind(),
        }
    }
}

impl ActionKindGet for TransitionFrontierSyncLedgerSuccessAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncLedgerSuccess
    }
}

impl ActionKindGet for P2pConnectionLibP2pOutgoingInitAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pConnectionLibP2pOutgoingInit
    }
}

impl ActionKindGet for P2pConnectionLibP2pOutgoingFinalizePendingAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pConnectionLibP2pOutgoingFinalizePending
    }
}

impl ActionKindGet for P2pConnectionLibP2pOutgoingFinalizeSuccessAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pConnectionLibP2pOutgoingFinalizeSuccess
    }
}

impl ActionKindGet for P2pConnectionLibP2pOutgoingFinalizeErrorAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pConnectionLibP2pOutgoingFinalizeError
    }
}

impl ActionKindGet for P2pConnectionLibP2pOutgoingFinalizeTimeoutAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pConnectionLibP2pOutgoingFinalizeTimeout
    }
}

impl ActionKindGet for P2pConnectionLibP2pOutgoingSuccessAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pConnectionLibP2pOutgoingSuccess
    }
}

impl ActionKindGet for P2pConnectionLibP2pOutgoingErrorAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pConnectionLibP2pOutgoingError
    }
}

impl ActionKindGet for P2pConnectionLibP2pIncomingSuccessAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pConnectionLibP2pIncomingSuccess
    }
}

impl ActionKindGet for P2pConnectionWebRTCOutgoingInitAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pConnectionWebRTCOutgoingInit
    }
}

impl ActionKindGet for P2pConnectionWebRTCOutgoingOfferSdpCreatePendingAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pConnectionWebRTCOutgoingOfferSdpCreatePending
    }
}

impl ActionKindGet for P2pConnectionWebRTCOutgoingOfferSdpCreateErrorAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pConnectionWebRTCOutgoingOfferSdpCreateError
    }
}

impl ActionKindGet for P2pConnectionWebRTCOutgoingOfferSdpCreateSuccessAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pConnectionWebRTCOutgoingOfferSdpCreateSuccess
    }
}

impl ActionKindGet for P2pConnectionWebRTCOutgoingOfferReadyAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pConnectionWebRTCOutgoingOfferReady
    }
}

impl ActionKindGet for P2pConnectionWebRTCOutgoingOfferSendSuccessAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pConnectionWebRTCOutgoingOfferSendSuccess
    }
}

impl ActionKindGet for P2pConnectionWebRTCOutgoingAnswerRecvPendingAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pConnectionWebRTCOutgoingAnswerRecvPending
    }
}

impl ActionKindGet for P2pConnectionWebRTCOutgoingAnswerRecvErrorAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pConnectionWebRTCOutgoingAnswerRecvError
    }
}

impl ActionKindGet for P2pConnectionWebRTCOutgoingAnswerRecvSuccessAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pConnectionWebRTCOutgoingAnswerRecvSuccess
    }
}

impl ActionKindGet for P2pConnectionWebRTCOutgoingFinalizePendingAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pConnectionWebRTCOutgoingFinalizePending
    }
}

impl ActionKindGet for P2pConnectionWebRTCOutgoingFinalizeErrorAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pConnectionWebRTCOutgoingFinalizeError
    }
}

impl ActionKindGet for P2pConnectionWebRTCOutgoingFinalizeSuccessAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pConnectionWebRTCOutgoingFinalizeSuccess
    }
}

impl ActionKindGet for P2pConnectionWebRTCOutgoingTimeoutAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pConnectionWebRTCOutgoingTimeout
    }
}

impl ActionKindGet for P2pConnectionWebRTCOutgoingErrorAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pConnectionWebRTCOutgoingError
    }
}

impl ActionKindGet for P2pConnectionWebRTCOutgoingSuccessAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pConnectionWebRTCOutgoingSuccess
    }
}

impl ActionKindGet for P2pConnectionWebRTCIncomingInitAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pConnectionWebRTCIncomingInit
    }
}

impl ActionKindGet for P2pConnectionWebRTCIncomingAnswerSdpCreatePendingAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pConnectionWebRTCIncomingAnswerSdpCreatePending
    }
}

impl ActionKindGet for P2pConnectionWebRTCIncomingAnswerSdpCreateErrorAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pConnectionWebRTCIncomingAnswerSdpCreateError
    }
}

impl ActionKindGet for P2pConnectionWebRTCIncomingAnswerSdpCreateSuccessAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pConnectionWebRTCIncomingAnswerSdpCreateSuccess
    }
}

impl ActionKindGet for P2pConnectionWebRTCIncomingAnswerReadyAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pConnectionWebRTCIncomingAnswerReady
    }
}

impl ActionKindGet for P2pConnectionWebRTCIncomingAnswerSendSuccessAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pConnectionWebRTCIncomingAnswerSendSuccess
    }
}

impl ActionKindGet for P2pConnectionWebRTCIncomingFinalizePendingAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pConnectionWebRTCIncomingFinalizePending
    }
}

impl ActionKindGet for P2pConnectionWebRTCIncomingFinalizeErrorAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pConnectionWebRTCIncomingFinalizeError
    }
}

impl ActionKindGet for P2pConnectionWebRTCIncomingFinalizeSuccessAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pConnectionWebRTCIncomingFinalizeSuccess
    }
}

impl ActionKindGet for P2pConnectionWebRTCIncomingTimeoutAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pConnectionWebRTCIncomingTimeout
    }
}

impl ActionKindGet for P2pConnectionWebRTCIncomingErrorAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pConnectionWebRTCIncomingError
    }
}

impl ActionKindGet for P2pConnectionWebRTCIncomingSuccessAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pConnectionWebRTCIncomingSuccess
    }
}

impl ActionKindGet for P2pConnectionWebRTCIncomingLibp2pReceivedAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pConnectionWebRTCIncomingLibp2pReceived
    }
}

impl ActionKindGet for TransitionFrontierSyncLedgerSnarkedPendingAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncLedgerSnarkedPending
    }
}

impl ActionKindGet for TransitionFrontierSyncLedgerSnarkedPeersQueryAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncLedgerSnarkedPeersQuery
    }
}

impl ActionKindGet for TransitionFrontierSyncLedgerSnarkedPeerQueryInitAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncLedgerSnarkedPeerQueryInit
    }
}

impl ActionKindGet for TransitionFrontierSyncLedgerSnarkedPeerQueryPendingAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncLedgerSnarkedPeerQueryPending
    }
}

impl ActionKindGet for TransitionFrontierSyncLedgerSnarkedPeerQueryRetryAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncLedgerSnarkedPeerQueryRetry
    }
}

impl ActionKindGet for TransitionFrontierSyncLedgerSnarkedPeerQueryErrorAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncLedgerSnarkedPeerQueryError
    }
}

impl ActionKindGet for TransitionFrontierSyncLedgerSnarkedPeerQuerySuccessAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncLedgerSnarkedPeerQuerySuccess
    }
}

impl ActionKindGet for TransitionFrontierSyncLedgerSnarkedChildHashesReceivedAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncLedgerSnarkedChildHashesReceived
    }
}

impl ActionKindGet for TransitionFrontierSyncLedgerSnarkedChildAccountsReceivedAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncLedgerSnarkedChildAccountsReceived
    }
}

impl ActionKindGet for TransitionFrontierSyncLedgerSnarkedSuccessAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncLedgerSnarkedSuccess
    }
}

impl ActionKindGet for TransitionFrontierSyncLedgerStagedPartsFetchPendingAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncLedgerStagedPartsFetchPending
    }
}

impl ActionKindGet for TransitionFrontierSyncLedgerStagedPartsPeerFetchInitAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncLedgerStagedPartsPeerFetchInit
    }
}

impl ActionKindGet for TransitionFrontierSyncLedgerStagedPartsPeerFetchPendingAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncLedgerStagedPartsPeerFetchPending
    }
}

impl ActionKindGet for TransitionFrontierSyncLedgerStagedPartsPeerFetchErrorAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncLedgerStagedPartsPeerFetchError
    }
}

impl ActionKindGet for TransitionFrontierSyncLedgerStagedPartsPeerFetchSuccessAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncLedgerStagedPartsPeerFetchSuccess
    }
}

impl ActionKindGet for TransitionFrontierSyncLedgerStagedPartsPeerInvalidAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncLedgerStagedPartsPeerInvalid
    }
}

impl ActionKindGet for TransitionFrontierSyncLedgerStagedPartsPeerValidAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncLedgerStagedPartsPeerValid
    }
}

impl ActionKindGet for TransitionFrontierSyncLedgerStagedPartsFetchSuccessAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncLedgerStagedPartsFetchSuccess
    }
}

impl ActionKindGet for TransitionFrontierSyncLedgerStagedReconstructEmptyAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncLedgerStagedReconstructEmpty
    }
}

impl ActionKindGet for TransitionFrontierSyncLedgerStagedReconstructInitAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncLedgerStagedReconstructInit
    }
}

impl ActionKindGet for TransitionFrontierSyncLedgerStagedReconstructPendingAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncLedgerStagedReconstructPending
    }
}

impl ActionKindGet for TransitionFrontierSyncLedgerStagedReconstructErrorAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncLedgerStagedReconstructError
    }
}

impl ActionKindGet for TransitionFrontierSyncLedgerStagedReconstructSuccessAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncLedgerStagedReconstructSuccess
    }
}

impl ActionKindGet for TransitionFrontierSyncLedgerStagedSuccessAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncLedgerStagedSuccess
    }
}
