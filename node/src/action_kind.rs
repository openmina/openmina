// DO NOT EDIT. GENERATED BY `node/build.rs`
//
// This file includes the [ActionKindGet] trait implementation for all action variants.
// It also defines the [ActionKind] enum that consolidates all action types.
//
// Why? As a substitute of the derive macro provided by the [enum-kinds](https://crates.io/crates/enum-kinds).
//
// This arrangement helps eliminate macro overhead while also enabling us to aggregate multiple action types
// into an single [ActionKind] enum.
// That enables uncoupling through the partitioning of actions into multiple types that get combined by a
// top-level [Action] type in a way that helps the compiler avoid the recompilation of all the actions
// related code for every single change.

use num_enum::TryFromPrimitive;
use serde::{Deserialize, Serialize};

use crate::block_producer::vrf_evaluator::{
    BlockProducerVrfEvaluatorAction, BlockProducerVrfEvaluatorEpochDataUpdateAction,
    BlockProducerVrfEvaluatorEvaluateVrfAction, BlockProducerVrfEvaluatorEvaluationSuccessAction,
    BlockProducerVrfEvaluatorUpdateProducerAndDelegatesAction,
    BlockProducerVrfEvaluatorUpdateProducerAndDelegatesSuccessAction,
};
use crate::block_producer::{
    BlockProducerAction, BlockProducerBestTipUpdateAction, BlockProducerBlockInjectAction,
    BlockProducerBlockInjectedAction, BlockProducerBlockProducedAction,
    BlockProducerBlockUnprovenBuildAction, BlockProducerStagedLedgerDiffCreateInitAction,
    BlockProducerStagedLedgerDiffCreatePendingAction,
    BlockProducerStagedLedgerDiffCreateSuccessAction, BlockProducerWonSlotAction,
    BlockProducerWonSlotDiscardAction, BlockProducerWonSlotProduceInitAction,
    BlockProducerWonSlotSearchAction, BlockProducerWonSlotWaitAction,
};
use crate::consensus::ConsensusAction;
use crate::event_source::{
    EventSourceAction, EventSourceNewEventAction, EventSourceProcessEventsAction,
    EventSourceWaitForEventsAction, EventSourceWaitTimeoutAction,
};
use crate::external_snark_worker::ExternalSnarkWorkerAction;
use crate::p2p::channels::best_tip::P2pChannelsBestTipAction;
use crate::p2p::channels::rpc::P2pChannelsRpcAction;
use crate::p2p::channels::snark::P2pChannelsSnarkAction;
use crate::p2p::channels::snark_job_commitment::P2pChannelsSnarkJobCommitmentAction;
use crate::p2p::channels::{P2pChannelsAction, P2pChannelsMessageReceivedAction};
use crate::p2p::connection::incoming::{
    P2pConnectionIncomingAction, P2pConnectionIncomingAnswerReadyAction,
    P2pConnectionIncomingAnswerSdpCreateErrorAction,
    P2pConnectionIncomingAnswerSdpCreatePendingAction,
    P2pConnectionIncomingAnswerSdpCreateSuccessAction,
    P2pConnectionIncomingAnswerSendSuccessAction, P2pConnectionIncomingErrorAction,
    P2pConnectionIncomingFinalizeErrorAction, P2pConnectionIncomingFinalizePendingAction,
    P2pConnectionIncomingFinalizeSuccessAction, P2pConnectionIncomingInitAction,
    P2pConnectionIncomingLibp2pReceivedAction, P2pConnectionIncomingSuccessAction,
    P2pConnectionIncomingTimeoutAction,
};
use crate::p2p::connection::outgoing::{
    P2pConnectionOutgoingAction, P2pConnectionOutgoingAnswerRecvErrorAction,
    P2pConnectionOutgoingAnswerRecvPendingAction, P2pConnectionOutgoingAnswerRecvSuccessAction,
    P2pConnectionOutgoingErrorAction, P2pConnectionOutgoingFinalizeErrorAction,
    P2pConnectionOutgoingFinalizePendingAction, P2pConnectionOutgoingFinalizeSuccessAction,
    P2pConnectionOutgoingInitAction, P2pConnectionOutgoingOfferReadyAction,
    P2pConnectionOutgoingOfferSdpCreateErrorAction,
    P2pConnectionOutgoingOfferSdpCreatePendingAction,
    P2pConnectionOutgoingOfferSdpCreateSuccessAction, P2pConnectionOutgoingOfferSendSuccessAction,
    P2pConnectionOutgoingRandomInitAction, P2pConnectionOutgoingReconnectAction,
    P2pConnectionOutgoingSuccessAction, P2pConnectionOutgoingTimeoutAction,
};
use crate::p2p::connection::P2pConnectionAction;
use crate::p2p::disconnection::{
    P2pDisconnectionAction, P2pDisconnectionFinishAction, P2pDisconnectionInitAction,
};
use crate::p2p::discovery::{
    P2pDiscoveryAction, P2pDiscoveryInitAction, P2pDiscoveryKademliaAddRouteAction,
    P2pDiscoveryKademliaBootstrapAction, P2pDiscoveryKademliaFailureAction,
    P2pDiscoveryKademliaInitAction, P2pDiscoveryKademliaSuccessAction, P2pDiscoverySuccessAction,
};
use crate::p2p::listen::{
    P2pListenAction, P2pListenClosedAction, P2pListenErrorAction, P2pListenExpiredAction,
    P2pListenNewAction,
};
use crate::p2p::network::connection::{
    P2pNetworkConnectionAction, P2pNetworkConnectionIncomingDataDidReceiveAction,
    P2pNetworkConnectionIncomingDataIsReadyAction, P2pNetworkConnectionInterfaceDetectedAction,
    P2pNetworkConnectionInterfaceExpiredAction, P2pNetworkConnectionOutgoingDidConnectAction,
    P2pNetworkConnectionSelectDoneAction, P2pNetworkConnectionSelectErrorAction,
};
use crate::p2p::network::noise::{
    P2pNetworkNoiseAction, P2pNetworkNoiseIncomingDataAction, P2pNetworkNoiseInitAction,
};
use crate::p2p::network::pnet::{
    P2pNetworkPnetAction, P2pNetworkPnetIncomingDataAction, P2pNetworkPnetOutgoingDataAction,
    P2pNetworkPnetSetupNonceAction,
};
use crate::p2p::network::select::{
    P2pNetworkSelectAction, P2pNetworkSelectIncomingDataAction,
    P2pNetworkSelectIncomingTokenAction, P2pNetworkSelectInitAction,
};
use crate::p2p::network::P2pNetworkAction;
use crate::p2p::peer::{P2pPeerAction, P2pPeerBestTipUpdateAction, P2pPeerReadyAction};
use crate::p2p::P2pAction;
use crate::rpc::{
    RpcAction, RpcActionStatsGetAction, RpcFinishAction, RpcGlobalStateGetAction,
    RpcHealthCheckAction, RpcP2pConnectionIncomingErrorAction, RpcP2pConnectionIncomingInitAction,
    RpcP2pConnectionIncomingPendingAction, RpcP2pConnectionIncomingRespondAction,
    RpcP2pConnectionIncomingSuccessAction, RpcP2pConnectionOutgoingErrorAction,
    RpcP2pConnectionOutgoingInitAction, RpcP2pConnectionOutgoingPendingAction,
    RpcP2pConnectionOutgoingSuccessAction, RpcPeersGetAction, RpcReadinessCheckAction,
    RpcScanStateSummaryGetAction, RpcSnarkPoolAvailableJobsGetAction, RpcSnarkPoolJobGetAction,
    RpcSnarkerConfigGetAction, RpcSnarkerJobCommitAction, RpcSnarkerJobSpecAction,
    RpcSnarkersWorkersGetAction, RpcSyncStatsGetAction,
};
use crate::snark::block_verify::SnarkBlockVerifyAction;
use crate::snark::work_verify::SnarkWorkVerifyAction;
use crate::snark::SnarkAction;
use crate::snark_pool::candidate::SnarkPoolCandidateAction;
use crate::snark_pool::SnarkPoolAction;
use crate::transition_frontier::sync::ledger::snarked::{
    TransitionFrontierSyncLedgerSnarkedAction,
    TransitionFrontierSyncLedgerSnarkedChildAccountsReceivedAction,
    TransitionFrontierSyncLedgerSnarkedChildHashesReceivedAction,
    TransitionFrontierSyncLedgerSnarkedPeerQueryErrorAction,
    TransitionFrontierSyncLedgerSnarkedPeerQueryInitAction,
    TransitionFrontierSyncLedgerSnarkedPeerQueryPendingAction,
    TransitionFrontierSyncLedgerSnarkedPeerQueryRetryAction,
    TransitionFrontierSyncLedgerSnarkedPeerQuerySuccessAction,
    TransitionFrontierSyncLedgerSnarkedPeersQueryAction,
    TransitionFrontierSyncLedgerSnarkedPendingAction,
    TransitionFrontierSyncLedgerSnarkedSuccessAction,
};
use crate::transition_frontier::sync::ledger::staged::{
    TransitionFrontierSyncLedgerStagedAction,
    TransitionFrontierSyncLedgerStagedPartsFetchPendingAction,
    TransitionFrontierSyncLedgerStagedPartsFetchSuccessAction,
    TransitionFrontierSyncLedgerStagedPartsPeerFetchErrorAction,
    TransitionFrontierSyncLedgerStagedPartsPeerFetchInitAction,
    TransitionFrontierSyncLedgerStagedPartsPeerFetchPendingAction,
    TransitionFrontierSyncLedgerStagedPartsPeerFetchSuccessAction,
    TransitionFrontierSyncLedgerStagedPartsPeerInvalidAction,
    TransitionFrontierSyncLedgerStagedPartsPeerValidAction,
    TransitionFrontierSyncLedgerStagedReconstructEmptyAction,
    TransitionFrontierSyncLedgerStagedReconstructErrorAction,
    TransitionFrontierSyncLedgerStagedReconstructInitAction,
    TransitionFrontierSyncLedgerStagedReconstructPendingAction,
    TransitionFrontierSyncLedgerStagedReconstructSuccessAction,
    TransitionFrontierSyncLedgerStagedSuccessAction,
};
use crate::transition_frontier::sync::ledger::{
    TransitionFrontierSyncLedgerAction, TransitionFrontierSyncLedgerInitAction,
    TransitionFrontierSyncLedgerSuccessAction,
};
use crate::transition_frontier::sync::{
    TransitionFrontierSyncAction, TransitionFrontierSyncBestTipUpdateAction,
    TransitionFrontierSyncBlocksFetchSuccessAction,
    TransitionFrontierSyncBlocksNextApplyInitAction,
    TransitionFrontierSyncBlocksNextApplyPendingAction,
    TransitionFrontierSyncBlocksNextApplySuccessAction,
    TransitionFrontierSyncBlocksPeerQueryErrorAction,
    TransitionFrontierSyncBlocksPeerQueryInitAction,
    TransitionFrontierSyncBlocksPeerQueryPendingAction,
    TransitionFrontierSyncBlocksPeerQueryRetryAction,
    TransitionFrontierSyncBlocksPeerQuerySuccessAction,
    TransitionFrontierSyncBlocksPeersQueryAction, TransitionFrontierSyncBlocksPendingAction,
    TransitionFrontierSyncBlocksSuccessAction, TransitionFrontierSyncInitAction,
    TransitionFrontierSyncLedgerNextEpochPendingAction,
    TransitionFrontierSyncLedgerNextEpochSuccessAction,
    TransitionFrontierSyncLedgerRootPendingAction, TransitionFrontierSyncLedgerRootSuccessAction,
    TransitionFrontierSyncLedgerStakingPendingAction,
    TransitionFrontierSyncLedgerStakingSuccessAction,
};
use crate::transition_frontier::{TransitionFrontierAction, TransitionFrontierSyncedAction};
use crate::watched_accounts::{
    WatchedAccountsAction, WatchedAccountsAddAction, WatchedAccountsBlockLedgerQueryInitAction,
    WatchedAccountsBlockLedgerQueryPendingAction, WatchedAccountsBlockLedgerQuerySuccessAction,
    WatchedAccountsBlockTransactionsIncludedAction,
    WatchedAccountsLedgerInitialStateGetErrorAction,
    WatchedAccountsLedgerInitialStateGetInitAction,
    WatchedAccountsLedgerInitialStateGetPendingAction,
    WatchedAccountsLedgerInitialStateGetRetryAction,
    WatchedAccountsLedgerInitialStateGetSuccessAction,
};
use crate::{Action, ActionKindGet, CheckTimeoutsAction};

/// Unified kind enum for all action types
#[derive(
    Serialize, Deserialize, TryFromPrimitive, Debug, Ord, PartialOrd, Eq, PartialEq, Clone, Copy,
)]
#[repr(u16)]
pub enum ActionKind {
    None,
    BlockProducerBestTipUpdate,
    BlockProducerBlockInject,
    BlockProducerBlockInjected,
    BlockProducerBlockProduced,
    BlockProducerBlockUnprovenBuild,
    BlockProducerStagedLedgerDiffCreateInit,
    BlockProducerStagedLedgerDiffCreatePending,
    BlockProducerStagedLedgerDiffCreateSuccess,
    BlockProducerVrfEvaluatorEpochDataUpdate,
    BlockProducerVrfEvaluatorEvaluateVrf,
    BlockProducerVrfEvaluatorEvaluationSuccess,
    BlockProducerVrfEvaluatorUpdateProducerAndDelegates,
    BlockProducerVrfEvaluatorUpdateProducerAndDelegatesSuccess,
    BlockProducerWonSlot,
    BlockProducerWonSlotDiscard,
    BlockProducerWonSlotProduceInit,
    BlockProducerWonSlotSearch,
    BlockProducerWonSlotWait,
    CheckTimeouts,
    ConsensusBestTipUpdate,
    ConsensusBlockChainProofUpdate,
    ConsensusBlockReceived,
    ConsensusBlockSnarkVerifyPending,
    ConsensusBlockSnarkVerifySuccess,
    ConsensusDetectForkRange,
    ConsensusLongRangeForkResolve,
    ConsensusPrune,
    ConsensusShortRangeForkResolve,
    EventSourceNewEvent,
    EventSourceProcessEvents,
    EventSourceWaitForEvents,
    EventSourceWaitTimeout,
    ExternalSnarkWorkerCancelWork,
    ExternalSnarkWorkerError,
    ExternalSnarkWorkerKill,
    ExternalSnarkWorkerKilled,
    ExternalSnarkWorkerPruneWork,
    ExternalSnarkWorkerStart,
    ExternalSnarkWorkerStartTimeout,
    ExternalSnarkWorkerStarted,
    ExternalSnarkWorkerSubmitWork,
    ExternalSnarkWorkerWorkCancelled,
    ExternalSnarkWorkerWorkError,
    ExternalSnarkWorkerWorkResult,
    ExternalSnarkWorkerWorkTimeout,
    P2pChannelsBestTipInit,
    P2pChannelsBestTipPending,
    P2pChannelsBestTipReady,
    P2pChannelsBestTipReceived,
    P2pChannelsBestTipRequestReceived,
    P2pChannelsBestTipRequestSend,
    P2pChannelsBestTipResponseSend,
    P2pChannelsMessageReceived,
    P2pChannelsRpcInit,
    P2pChannelsRpcPending,
    P2pChannelsRpcReady,
    P2pChannelsRpcRequestReceived,
    P2pChannelsRpcRequestSend,
    P2pChannelsRpcResponseReceived,
    P2pChannelsRpcResponseSend,
    P2pChannelsRpcTimeout,
    P2pChannelsSnarkInit,
    P2pChannelsSnarkLibp2pBroadcast,
    P2pChannelsSnarkLibp2pReceived,
    P2pChannelsSnarkPending,
    P2pChannelsSnarkPromiseReceived,
    P2pChannelsSnarkReady,
    P2pChannelsSnarkReceived,
    P2pChannelsSnarkRequestReceived,
    P2pChannelsSnarkRequestSend,
    P2pChannelsSnarkResponseSend,
    P2pChannelsSnarkJobCommitmentInit,
    P2pChannelsSnarkJobCommitmentPending,
    P2pChannelsSnarkJobCommitmentPromiseReceived,
    P2pChannelsSnarkJobCommitmentReady,
    P2pChannelsSnarkJobCommitmentReceived,
    P2pChannelsSnarkJobCommitmentRequestReceived,
    P2pChannelsSnarkJobCommitmentRequestSend,
    P2pChannelsSnarkJobCommitmentResponseSend,
    P2pConnectionIncomingAnswerReady,
    P2pConnectionIncomingAnswerSdpCreateError,
    P2pConnectionIncomingAnswerSdpCreatePending,
    P2pConnectionIncomingAnswerSdpCreateSuccess,
    P2pConnectionIncomingAnswerSendSuccess,
    P2pConnectionIncomingError,
    P2pConnectionIncomingFinalizeError,
    P2pConnectionIncomingFinalizePending,
    P2pConnectionIncomingFinalizeSuccess,
    P2pConnectionIncomingInit,
    P2pConnectionIncomingLibp2pReceived,
    P2pConnectionIncomingSuccess,
    P2pConnectionIncomingTimeout,
    P2pConnectionOutgoingAnswerRecvError,
    P2pConnectionOutgoingAnswerRecvPending,
    P2pConnectionOutgoingAnswerRecvSuccess,
    P2pConnectionOutgoingError,
    P2pConnectionOutgoingFinalizeError,
    P2pConnectionOutgoingFinalizePending,
    P2pConnectionOutgoingFinalizeSuccess,
    P2pConnectionOutgoingInit,
    P2pConnectionOutgoingOfferReady,
    P2pConnectionOutgoingOfferSdpCreateError,
    P2pConnectionOutgoingOfferSdpCreatePending,
    P2pConnectionOutgoingOfferSdpCreateSuccess,
    P2pConnectionOutgoingOfferSendSuccess,
    P2pConnectionOutgoingRandomInit,
    P2pConnectionOutgoingReconnect,
    P2pConnectionOutgoingSuccess,
    P2pConnectionOutgoingTimeout,
    P2pDisconnectionFinish,
    P2pDisconnectionInit,
    P2pDiscoveryInit,
    P2pDiscoveryKademliaAddRoute,
    P2pDiscoveryKademliaBootstrap,
    P2pDiscoveryKademliaFailure,
    P2pDiscoveryKademliaInit,
    P2pDiscoveryKademliaSuccess,
    P2pDiscoverySuccess,
    P2pListenClosed,
    P2pListenError,
    P2pListenExpired,
    P2pListenNew,
    P2pNetworkConnectionIncomingDataDidReceive,
    P2pNetworkConnectionIncomingDataIsReady,
    P2pNetworkConnectionInterfaceDetected,
    P2pNetworkConnectionInterfaceExpired,
    P2pNetworkConnectionOutgoingDidConnect,
    P2pNetworkConnectionSelectDone,
    P2pNetworkConnectionSelectError,
    P2pNetworkNoiseIncomingData,
    P2pNetworkNoiseInit,
    P2pNetworkPnetIncomingData,
    P2pNetworkPnetOutgoingData,
    P2pNetworkPnetSetupNonce,
    P2pNetworkSelectIncomingData,
    P2pNetworkSelectIncomingToken,
    P2pNetworkSelectInit,
    P2pPeerBestTipUpdate,
    P2pPeerReady,
    RpcActionStatsGet,
    RpcFinish,
    RpcGlobalStateGet,
    RpcHealthCheck,
    RpcP2pConnectionIncomingError,
    RpcP2pConnectionIncomingInit,
    RpcP2pConnectionIncomingPending,
    RpcP2pConnectionIncomingRespond,
    RpcP2pConnectionIncomingSuccess,
    RpcP2pConnectionOutgoingError,
    RpcP2pConnectionOutgoingInit,
    RpcP2pConnectionOutgoingPending,
    RpcP2pConnectionOutgoingSuccess,
    RpcPeersGet,
    RpcReadinessCheck,
    RpcScanStateSummaryGet,
    RpcSnarkPoolAvailableJobsGet,
    RpcSnarkPoolJobGet,
    RpcSnarkerConfigGet,
    RpcSnarkerJobCommit,
    RpcSnarkerJobSpec,
    RpcSnarkersWorkersGet,
    RpcSyncStatsGet,
    SnarkBlockVerifyError,
    SnarkBlockVerifyFinish,
    SnarkBlockVerifyInit,
    SnarkBlockVerifyPending,
    SnarkBlockVerifySuccess,
    SnarkPoolAutoCreateCommitment,
    SnarkPoolCheckTimeouts,
    SnarkPoolCommitmentAdd,
    SnarkPoolCommitmentCreate,
    SnarkPoolJobCommitmentTimeout,
    SnarkPoolJobsUpdate,
    SnarkPoolP2pSend,
    SnarkPoolP2pSendAll,
    SnarkPoolWorkAdd,
    SnarkPoolCandidateInfoReceived,
    SnarkPoolCandidatePeerPrune,
    SnarkPoolCandidateWorkFetchAll,
    SnarkPoolCandidateWorkFetchInit,
    SnarkPoolCandidateWorkFetchPending,
    SnarkPoolCandidateWorkReceived,
    SnarkPoolCandidateWorkVerifyError,
    SnarkPoolCandidateWorkVerifyNext,
    SnarkPoolCandidateWorkVerifyPending,
    SnarkPoolCandidateWorkVerifySuccess,
    SnarkWorkVerifyError,
    SnarkWorkVerifyFinish,
    SnarkWorkVerifyInit,
    SnarkWorkVerifyPending,
    SnarkWorkVerifySuccess,
    TransitionFrontierSyncBestTipUpdate,
    TransitionFrontierSyncBlocksFetchSuccess,
    TransitionFrontierSyncBlocksNextApplyInit,
    TransitionFrontierSyncBlocksNextApplyPending,
    TransitionFrontierSyncBlocksNextApplySuccess,
    TransitionFrontierSyncBlocksPeerQueryError,
    TransitionFrontierSyncBlocksPeerQueryInit,
    TransitionFrontierSyncBlocksPeerQueryPending,
    TransitionFrontierSyncBlocksPeerQueryRetry,
    TransitionFrontierSyncBlocksPeerQuerySuccess,
    TransitionFrontierSyncBlocksPeersQuery,
    TransitionFrontierSyncBlocksPending,
    TransitionFrontierSyncBlocksSuccess,
    TransitionFrontierSyncInit,
    TransitionFrontierSyncLedgerInit,
    TransitionFrontierSyncLedgerNextEpochPending,
    TransitionFrontierSyncLedgerNextEpochSuccess,
    TransitionFrontierSyncLedgerRootPending,
    TransitionFrontierSyncLedgerRootSuccess,
    TransitionFrontierSyncLedgerSnarkedChildAccountsReceived,
    TransitionFrontierSyncLedgerSnarkedChildHashesReceived,
    TransitionFrontierSyncLedgerSnarkedPeerQueryError,
    TransitionFrontierSyncLedgerSnarkedPeerQueryInit,
    TransitionFrontierSyncLedgerSnarkedPeerQueryPending,
    TransitionFrontierSyncLedgerSnarkedPeerQueryRetry,
    TransitionFrontierSyncLedgerSnarkedPeerQuerySuccess,
    TransitionFrontierSyncLedgerSnarkedPeersQuery,
    TransitionFrontierSyncLedgerSnarkedPending,
    TransitionFrontierSyncLedgerSnarkedSuccess,
    TransitionFrontierSyncLedgerStagedPartsFetchPending,
    TransitionFrontierSyncLedgerStagedPartsFetchSuccess,
    TransitionFrontierSyncLedgerStagedPartsPeerFetchError,
    TransitionFrontierSyncLedgerStagedPartsPeerFetchInit,
    TransitionFrontierSyncLedgerStagedPartsPeerFetchPending,
    TransitionFrontierSyncLedgerStagedPartsPeerFetchSuccess,
    TransitionFrontierSyncLedgerStagedPartsPeerInvalid,
    TransitionFrontierSyncLedgerStagedPartsPeerValid,
    TransitionFrontierSyncLedgerStagedReconstructEmpty,
    TransitionFrontierSyncLedgerStagedReconstructError,
    TransitionFrontierSyncLedgerStagedReconstructInit,
    TransitionFrontierSyncLedgerStagedReconstructPending,
    TransitionFrontierSyncLedgerStagedReconstructSuccess,
    TransitionFrontierSyncLedgerStagedSuccess,
    TransitionFrontierSyncLedgerStakingPending,
    TransitionFrontierSyncLedgerStakingSuccess,
    TransitionFrontierSyncLedgerSuccess,
    TransitionFrontierSynced,
    WatchedAccountsAdd,
    WatchedAccountsBlockLedgerQueryInit,
    WatchedAccountsBlockLedgerQueryPending,
    WatchedAccountsBlockLedgerQuerySuccess,
    WatchedAccountsBlockTransactionsIncluded,
    WatchedAccountsLedgerInitialStateGetError,
    WatchedAccountsLedgerInitialStateGetInit,
    WatchedAccountsLedgerInitialStateGetPending,
    WatchedAccountsLedgerInitialStateGetRetry,
    WatchedAccountsLedgerInitialStateGetSuccess,
}

impl ActionKind {
    pub const COUNT: u16 = 249;
}

impl std::fmt::Display for ActionKind {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "{self:?}")
    }
}

impl ActionKindGet for Action {
    fn kind(&self) -> ActionKind {
        match self {
            Self::CheckTimeouts(a) => a.kind(),
            Self::EventSource(a) => a.kind(),
            Self::P2p(a) => a.kind(),
            Self::Snark(a) => a.kind(),
            Self::Consensus(a) => a.kind(),
            Self::TransitionFrontier(a) => a.kind(),
            Self::SnarkPool(a) => a.kind(),
            Self::ExternalSnarkWorker(a) => a.kind(),
            Self::BlockProducer(a) => a.kind(),
            Self::Rpc(a) => a.kind(),
            Self::WatchedAccounts(a) => a.kind(),
        }
    }
}

impl ActionKindGet for CheckTimeoutsAction {
    fn kind(&self) -> ActionKind {
        ActionKind::CheckTimeouts
    }
}

impl ActionKindGet for EventSourceAction {
    fn kind(&self) -> ActionKind {
        match self {
            Self::ProcessEvents(a) => a.kind(),
            Self::NewEvent(a) => a.kind(),
            Self::WaitForEvents(a) => a.kind(),
            Self::WaitTimeout(a) => a.kind(),
        }
    }
}

impl ActionKindGet for P2pAction {
    fn kind(&self) -> ActionKind {
        match self {
            Self::Listen(a) => a.kind(),
            Self::Connection(a) => a.kind(),
            Self::Disconnection(a) => a.kind(),
            Self::Discovery(a) => a.kind(),
            Self::Channels(a) => a.kind(),
            Self::Peer(a) => a.kind(),
            Self::Network(a) => a.kind(),
        }
    }
}

impl ActionKindGet for SnarkAction {
    fn kind(&self) -> ActionKind {
        match self {
            Self::BlockVerify(a) => a.kind(),
            Self::WorkVerify(a) => a.kind(),
        }
    }
}

impl ActionKindGet for ConsensusAction {
    fn kind(&self) -> ActionKind {
        match self {
            Self::BlockReceived { .. } => ActionKind::ConsensusBlockReceived,
            Self::BlockChainProofUpdate { .. } => ActionKind::ConsensusBlockChainProofUpdate,
            Self::BlockSnarkVerifyPending { .. } => ActionKind::ConsensusBlockSnarkVerifyPending,
            Self::BlockSnarkVerifySuccess { .. } => ActionKind::ConsensusBlockSnarkVerifySuccess,
            Self::DetectForkRange { .. } => ActionKind::ConsensusDetectForkRange,
            Self::ShortRangeForkResolve { .. } => ActionKind::ConsensusShortRangeForkResolve,
            Self::LongRangeForkResolve { .. } => ActionKind::ConsensusLongRangeForkResolve,
            Self::BestTipUpdate { .. } => ActionKind::ConsensusBestTipUpdate,
            Self::Prune => ActionKind::ConsensusPrune,
        }
    }
}

impl ActionKindGet for TransitionFrontierAction {
    fn kind(&self) -> ActionKind {
        match self {
            Self::Sync(a) => a.kind(),
            Self::Synced(a) => a.kind(),
        }
    }
}

impl ActionKindGet for SnarkPoolAction {
    fn kind(&self) -> ActionKind {
        match self {
            Self::Candidate(a) => a.kind(),
            Self::JobsUpdate { .. } => ActionKind::SnarkPoolJobsUpdate,
            Self::AutoCreateCommitment => ActionKind::SnarkPoolAutoCreateCommitment,
            Self::CommitmentCreate { .. } => ActionKind::SnarkPoolCommitmentCreate,
            Self::CommitmentAdd { .. } => ActionKind::SnarkPoolCommitmentAdd,
            Self::WorkAdd { .. } => ActionKind::SnarkPoolWorkAdd,
            Self::P2pSendAll => ActionKind::SnarkPoolP2pSendAll,
            Self::P2pSend { .. } => ActionKind::SnarkPoolP2pSend,
            Self::CheckTimeouts => ActionKind::SnarkPoolCheckTimeouts,
            Self::JobCommitmentTimeout { .. } => ActionKind::SnarkPoolJobCommitmentTimeout,
        }
    }
}

impl ActionKindGet for ExternalSnarkWorkerAction {
    fn kind(&self) -> ActionKind {
        match self {
            Self::Start => ActionKind::ExternalSnarkWorkerStart,
            Self::Started => ActionKind::ExternalSnarkWorkerStarted,
            Self::StartTimeout { .. } => ActionKind::ExternalSnarkWorkerStartTimeout,
            Self::Kill => ActionKind::ExternalSnarkWorkerKill,
            Self::Killed => ActionKind::ExternalSnarkWorkerKilled,
            Self::SubmitWork { .. } => ActionKind::ExternalSnarkWorkerSubmitWork,
            Self::WorkResult { .. } => ActionKind::ExternalSnarkWorkerWorkResult,
            Self::WorkError { .. } => ActionKind::ExternalSnarkWorkerWorkError,
            Self::WorkTimeout { .. } => ActionKind::ExternalSnarkWorkerWorkTimeout,
            Self::CancelWork => ActionKind::ExternalSnarkWorkerCancelWork,
            Self::WorkCancelled => ActionKind::ExternalSnarkWorkerWorkCancelled,
            Self::PruneWork => ActionKind::ExternalSnarkWorkerPruneWork,
            Self::Error { .. } => ActionKind::ExternalSnarkWorkerError,
        }
    }
}

impl ActionKindGet for BlockProducerAction {
    fn kind(&self) -> ActionKind {
        match self {
            Self::VrfEvaluator(a) => a.kind(),
            Self::BestTipUpdate(a) => a.kind(),
            Self::WonSlotSearch(a) => a.kind(),
            Self::WonSlot(a) => a.kind(),
            Self::WonSlotDiscard(a) => a.kind(),
            Self::WonSlotWait(a) => a.kind(),
            Self::WonSlotProduceInit(a) => a.kind(),
            Self::StagedLedgerDiffCreateInit(a) => a.kind(),
            Self::StagedLedgerDiffCreatePending(a) => a.kind(),
            Self::StagedLedgerDiffCreateSuccess(a) => a.kind(),
            Self::BlockUnprovenBuild(a) => a.kind(),
            Self::BlockProduced(a) => a.kind(),
            Self::BlockInject(a) => a.kind(),
            Self::BlockInjected(a) => a.kind(),
        }
    }
}

impl ActionKindGet for RpcAction {
    fn kind(&self) -> ActionKind {
        match self {
            Self::GlobalStateGet(a) => a.kind(),
            Self::ActionStatsGet(a) => a.kind(),
            Self::SyncStatsGet(a) => a.kind(),
            Self::PeersGet(a) => a.kind(),
            Self::P2pConnectionOutgoingInit(a) => a.kind(),
            Self::P2pConnectionOutgoingPending(a) => a.kind(),
            Self::P2pConnectionOutgoingError(a) => a.kind(),
            Self::P2pConnectionOutgoingSuccess(a) => a.kind(),
            Self::P2pConnectionIncomingInit(a) => a.kind(),
            Self::P2pConnectionIncomingPending(a) => a.kind(),
            Self::P2pConnectionIncomingRespond(a) => a.kind(),
            Self::P2pConnectionIncomingError(a) => a.kind(),
            Self::P2pConnectionIncomingSuccess(a) => a.kind(),
            Self::ScanStateSummaryGet(a) => a.kind(),
            Self::SnarkPoolAvailableJobsGet(a) => a.kind(),
            Self::SnarkPoolJobGet(a) => a.kind(),
            Self::SnarkerConfigGet(a) => a.kind(),
            Self::SnarkerJobCommit(a) => a.kind(),
            Self::SnarkerJobSpec(a) => a.kind(),
            Self::SnarkerWorkersGet(a) => a.kind(),
            Self::HealthCheck(a) => a.kind(),
            Self::ReadinessCheck(a) => a.kind(),
            Self::Finish(a) => a.kind(),
        }
    }
}

impl ActionKindGet for WatchedAccountsAction {
    fn kind(&self) -> ActionKind {
        match self {
            Self::Add(a) => a.kind(),
            Self::LedgerInitialStateGetInit(a) => a.kind(),
            Self::LedgerInitialStateGetPending(a) => a.kind(),
            Self::LedgerInitialStateGetError(a) => a.kind(),
            Self::LedgerInitialStateGetRetry(a) => a.kind(),
            Self::LedgerInitialStateGetSuccess(a) => a.kind(),
            Self::TransactionsIncludedInBlock(a) => a.kind(),
            Self::BlockLedgerQueryInit(a) => a.kind(),
            Self::BlockLedgerQueryPending(a) => a.kind(),
            Self::BlockLedgerQuerySuccess(a) => a.kind(),
        }
    }
}

impl ActionKindGet for EventSourceProcessEventsAction {
    fn kind(&self) -> ActionKind {
        ActionKind::EventSourceProcessEvents
    }
}

impl ActionKindGet for EventSourceNewEventAction {
    fn kind(&self) -> ActionKind {
        ActionKind::EventSourceNewEvent
    }
}

impl ActionKindGet for EventSourceWaitForEventsAction {
    fn kind(&self) -> ActionKind {
        ActionKind::EventSourceWaitForEvents
    }
}

impl ActionKindGet for EventSourceWaitTimeoutAction {
    fn kind(&self) -> ActionKind {
        ActionKind::EventSourceWaitTimeout
    }
}

impl ActionKindGet for P2pListenAction {
    fn kind(&self) -> ActionKind {
        match self {
            Self::New(a) => a.kind(),
            Self::Expired(a) => a.kind(),
            Self::Error(a) => a.kind(),
            Self::Closed(a) => a.kind(),
        }
    }
}

impl ActionKindGet for P2pConnectionAction {
    fn kind(&self) -> ActionKind {
        match self {
            Self::Outgoing(a) => a.kind(),
            Self::Incoming(a) => a.kind(),
        }
    }
}

impl ActionKindGet for P2pDisconnectionAction {
    fn kind(&self) -> ActionKind {
        match self {
            Self::Init(a) => a.kind(),
            Self::Finish(a) => a.kind(),
        }
    }
}

impl ActionKindGet for P2pDiscoveryAction {
    fn kind(&self) -> ActionKind {
        match self {
            Self::Init(a) => a.kind(),
            Self::Success(a) => a.kind(),
            Self::KademliaBootstrap(a) => a.kind(),
            Self::KademliaInit(a) => a.kind(),
            Self::KademliaAddRoute(a) => a.kind(),
            Self::KademliaSuccess(a) => a.kind(),
            Self::KademliaFailure(a) => a.kind(),
        }
    }
}

impl ActionKindGet for P2pChannelsAction {
    fn kind(&self) -> ActionKind {
        match self {
            Self::MessageReceived(a) => a.kind(),
            Self::BestTip(a) => a.kind(),
            Self::Snark(a) => a.kind(),
            Self::SnarkJobCommitment(a) => a.kind(),
            Self::Rpc(a) => a.kind(),
        }
    }
}

impl ActionKindGet for P2pPeerAction {
    fn kind(&self) -> ActionKind {
        match self {
            Self::Ready(a) => a.kind(),
            Self::BestTipUpdate(a) => a.kind(),
        }
    }
}

impl ActionKindGet for P2pNetworkAction {
    fn kind(&self) -> ActionKind {
        match self {
            Self::Connection(a) => a.kind(),
            Self::Pnet(a) => a.kind(),
            Self::Select(a) => a.kind(),
            Self::Noise(a) => a.kind(),
        }
    }
}

impl ActionKindGet for SnarkBlockVerifyAction {
    fn kind(&self) -> ActionKind {
        match self {
            Self::Init { .. } => ActionKind::SnarkBlockVerifyInit,
            Self::Pending { .. } => ActionKind::SnarkBlockVerifyPending,
            Self::Error { .. } => ActionKind::SnarkBlockVerifyError,
            Self::Success { .. } => ActionKind::SnarkBlockVerifySuccess,
            Self::Finish { .. } => ActionKind::SnarkBlockVerifyFinish,
        }
    }
}

impl ActionKindGet for SnarkWorkVerifyAction {
    fn kind(&self) -> ActionKind {
        match self {
            Self::Init { .. } => ActionKind::SnarkWorkVerifyInit,
            Self::Pending { .. } => ActionKind::SnarkWorkVerifyPending,
            Self::Error { .. } => ActionKind::SnarkWorkVerifyError,
            Self::Success { .. } => ActionKind::SnarkWorkVerifySuccess,
            Self::Finish { .. } => ActionKind::SnarkWorkVerifyFinish,
        }
    }
}

impl ActionKindGet for TransitionFrontierSyncAction {
    fn kind(&self) -> ActionKind {
        match self {
            Self::Init(a) => a.kind(),
            Self::BestTipUpdate(a) => a.kind(),
            Self::LedgerStakingPending(a) => a.kind(),
            Self::LedgerStakingSuccess(a) => a.kind(),
            Self::LedgerNextEpochPending(a) => a.kind(),
            Self::LedgerNextEpochSuccess(a) => a.kind(),
            Self::LedgerRootPending(a) => a.kind(),
            Self::LedgerRootSuccess(a) => a.kind(),
            Self::BlocksPending(a) => a.kind(),
            Self::BlocksPeersQuery(a) => a.kind(),
            Self::BlocksPeerQueryInit(a) => a.kind(),
            Self::BlocksPeerQueryRetry(a) => a.kind(),
            Self::BlocksPeerQueryPending(a) => a.kind(),
            Self::BlocksPeerQueryError(a) => a.kind(),
            Self::BlocksPeerQuerySuccess(a) => a.kind(),
            Self::BlocksFetchSuccess(a) => a.kind(),
            Self::BlocksNextApplyInit(a) => a.kind(),
            Self::BlocksNextApplyPending(a) => a.kind(),
            Self::BlocksNextApplySuccess(a) => a.kind(),
            Self::BlocksSuccess(a) => a.kind(),
            Self::Ledger(a) => a.kind(),
        }
    }
}

impl ActionKindGet for TransitionFrontierSyncedAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSynced
    }
}

impl ActionKindGet for SnarkPoolCandidateAction {
    fn kind(&self) -> ActionKind {
        match self {
            Self::InfoReceived { .. } => ActionKind::SnarkPoolCandidateInfoReceived,
            Self::WorkFetchAll => ActionKind::SnarkPoolCandidateWorkFetchAll,
            Self::WorkFetchInit { .. } => ActionKind::SnarkPoolCandidateWorkFetchInit,
            Self::WorkFetchPending { .. } => ActionKind::SnarkPoolCandidateWorkFetchPending,
            Self::WorkReceived { .. } => ActionKind::SnarkPoolCandidateWorkReceived,
            Self::WorkVerifyNext => ActionKind::SnarkPoolCandidateWorkVerifyNext,
            Self::WorkVerifyPending { .. } => ActionKind::SnarkPoolCandidateWorkVerifyPending,
            Self::WorkVerifyError { .. } => ActionKind::SnarkPoolCandidateWorkVerifyError,
            Self::WorkVerifySuccess { .. } => ActionKind::SnarkPoolCandidateWorkVerifySuccess,
            Self::PeerPrune { .. } => ActionKind::SnarkPoolCandidatePeerPrune,
        }
    }
}

impl ActionKindGet for BlockProducerVrfEvaluatorAction {
    fn kind(&self) -> ActionKind {
        match self {
            Self::EpochDataUpdate(a) => a.kind(),
            Self::EvaluateVrf(a) => a.kind(),
            Self::EvaluationSuccess(a) => a.kind(),
            Self::UpdateProducerAndDelegates(a) => a.kind(),
            Self::UpdateProducerAndDelegatesSuccess(a) => a.kind(),
        }
    }
}

impl ActionKindGet for BlockProducerBestTipUpdateAction {
    fn kind(&self) -> ActionKind {
        ActionKind::BlockProducerBestTipUpdate
    }
}

impl ActionKindGet for BlockProducerWonSlotSearchAction {
    fn kind(&self) -> ActionKind {
        ActionKind::BlockProducerWonSlotSearch
    }
}

impl ActionKindGet for BlockProducerWonSlotAction {
    fn kind(&self) -> ActionKind {
        ActionKind::BlockProducerWonSlot
    }
}

impl ActionKindGet for BlockProducerWonSlotDiscardAction {
    fn kind(&self) -> ActionKind {
        ActionKind::BlockProducerWonSlotDiscard
    }
}

impl ActionKindGet for BlockProducerWonSlotWaitAction {
    fn kind(&self) -> ActionKind {
        ActionKind::BlockProducerWonSlotWait
    }
}

impl ActionKindGet for BlockProducerWonSlotProduceInitAction {
    fn kind(&self) -> ActionKind {
        ActionKind::BlockProducerWonSlotProduceInit
    }
}

impl ActionKindGet for BlockProducerStagedLedgerDiffCreateInitAction {
    fn kind(&self) -> ActionKind {
        ActionKind::BlockProducerStagedLedgerDiffCreateInit
    }
}

impl ActionKindGet for BlockProducerStagedLedgerDiffCreatePendingAction {
    fn kind(&self) -> ActionKind {
        ActionKind::BlockProducerStagedLedgerDiffCreatePending
    }
}

impl ActionKindGet for BlockProducerStagedLedgerDiffCreateSuccessAction {
    fn kind(&self) -> ActionKind {
        ActionKind::BlockProducerStagedLedgerDiffCreateSuccess
    }
}

impl ActionKindGet for BlockProducerBlockUnprovenBuildAction {
    fn kind(&self) -> ActionKind {
        ActionKind::BlockProducerBlockUnprovenBuild
    }
}

impl ActionKindGet for BlockProducerBlockProducedAction {
    fn kind(&self) -> ActionKind {
        ActionKind::BlockProducerBlockProduced
    }
}

impl ActionKindGet for BlockProducerBlockInjectAction {
    fn kind(&self) -> ActionKind {
        ActionKind::BlockProducerBlockInject
    }
}

impl ActionKindGet for BlockProducerBlockInjectedAction {
    fn kind(&self) -> ActionKind {
        ActionKind::BlockProducerBlockInjected
    }
}

impl ActionKindGet for RpcGlobalStateGetAction {
    fn kind(&self) -> ActionKind {
        ActionKind::RpcGlobalStateGet
    }
}

impl ActionKindGet for RpcActionStatsGetAction {
    fn kind(&self) -> ActionKind {
        ActionKind::RpcActionStatsGet
    }
}

impl ActionKindGet for RpcSyncStatsGetAction {
    fn kind(&self) -> ActionKind {
        ActionKind::RpcSyncStatsGet
    }
}

impl ActionKindGet for RpcPeersGetAction {
    fn kind(&self) -> ActionKind {
        ActionKind::RpcPeersGet
    }
}

impl ActionKindGet for RpcP2pConnectionOutgoingInitAction {
    fn kind(&self) -> ActionKind {
        ActionKind::RpcP2pConnectionOutgoingInit
    }
}

impl ActionKindGet for RpcP2pConnectionOutgoingPendingAction {
    fn kind(&self) -> ActionKind {
        ActionKind::RpcP2pConnectionOutgoingPending
    }
}

impl ActionKindGet for RpcP2pConnectionOutgoingErrorAction {
    fn kind(&self) -> ActionKind {
        ActionKind::RpcP2pConnectionOutgoingError
    }
}

impl ActionKindGet for RpcP2pConnectionOutgoingSuccessAction {
    fn kind(&self) -> ActionKind {
        ActionKind::RpcP2pConnectionOutgoingSuccess
    }
}

impl ActionKindGet for RpcP2pConnectionIncomingInitAction {
    fn kind(&self) -> ActionKind {
        ActionKind::RpcP2pConnectionIncomingInit
    }
}

impl ActionKindGet for RpcP2pConnectionIncomingPendingAction {
    fn kind(&self) -> ActionKind {
        ActionKind::RpcP2pConnectionIncomingPending
    }
}

impl ActionKindGet for RpcP2pConnectionIncomingRespondAction {
    fn kind(&self) -> ActionKind {
        ActionKind::RpcP2pConnectionIncomingRespond
    }
}

impl ActionKindGet for RpcP2pConnectionIncomingErrorAction {
    fn kind(&self) -> ActionKind {
        ActionKind::RpcP2pConnectionIncomingError
    }
}

impl ActionKindGet for RpcP2pConnectionIncomingSuccessAction {
    fn kind(&self) -> ActionKind {
        ActionKind::RpcP2pConnectionIncomingSuccess
    }
}

impl ActionKindGet for RpcScanStateSummaryGetAction {
    fn kind(&self) -> ActionKind {
        ActionKind::RpcScanStateSummaryGet
    }
}

impl ActionKindGet for RpcSnarkPoolAvailableJobsGetAction {
    fn kind(&self) -> ActionKind {
        ActionKind::RpcSnarkPoolAvailableJobsGet
    }
}

impl ActionKindGet for RpcSnarkPoolJobGetAction {
    fn kind(&self) -> ActionKind {
        ActionKind::RpcSnarkPoolJobGet
    }
}

impl ActionKindGet for RpcSnarkerConfigGetAction {
    fn kind(&self) -> ActionKind {
        ActionKind::RpcSnarkerConfigGet
    }
}

impl ActionKindGet for RpcSnarkerJobCommitAction {
    fn kind(&self) -> ActionKind {
        ActionKind::RpcSnarkerJobCommit
    }
}

impl ActionKindGet for RpcSnarkerJobSpecAction {
    fn kind(&self) -> ActionKind {
        ActionKind::RpcSnarkerJobSpec
    }
}

impl ActionKindGet for RpcSnarkersWorkersGetAction {
    fn kind(&self) -> ActionKind {
        ActionKind::RpcSnarkersWorkersGet
    }
}

impl ActionKindGet for RpcHealthCheckAction {
    fn kind(&self) -> ActionKind {
        ActionKind::RpcHealthCheck
    }
}

impl ActionKindGet for RpcReadinessCheckAction {
    fn kind(&self) -> ActionKind {
        ActionKind::RpcReadinessCheck
    }
}

impl ActionKindGet for RpcFinishAction {
    fn kind(&self) -> ActionKind {
        ActionKind::RpcFinish
    }
}

impl ActionKindGet for WatchedAccountsAddAction {
    fn kind(&self) -> ActionKind {
        ActionKind::WatchedAccountsAdd
    }
}

impl ActionKindGet for WatchedAccountsLedgerInitialStateGetInitAction {
    fn kind(&self) -> ActionKind {
        ActionKind::WatchedAccountsLedgerInitialStateGetInit
    }
}

impl ActionKindGet for WatchedAccountsLedgerInitialStateGetPendingAction {
    fn kind(&self) -> ActionKind {
        ActionKind::WatchedAccountsLedgerInitialStateGetPending
    }
}

impl ActionKindGet for WatchedAccountsLedgerInitialStateGetErrorAction {
    fn kind(&self) -> ActionKind {
        ActionKind::WatchedAccountsLedgerInitialStateGetError
    }
}

impl ActionKindGet for WatchedAccountsLedgerInitialStateGetRetryAction {
    fn kind(&self) -> ActionKind {
        ActionKind::WatchedAccountsLedgerInitialStateGetRetry
    }
}

impl ActionKindGet for WatchedAccountsLedgerInitialStateGetSuccessAction {
    fn kind(&self) -> ActionKind {
        ActionKind::WatchedAccountsLedgerInitialStateGetSuccess
    }
}

impl ActionKindGet for WatchedAccountsBlockTransactionsIncludedAction {
    fn kind(&self) -> ActionKind {
        ActionKind::WatchedAccountsBlockTransactionsIncluded
    }
}

impl ActionKindGet for WatchedAccountsBlockLedgerQueryInitAction {
    fn kind(&self) -> ActionKind {
        ActionKind::WatchedAccountsBlockLedgerQueryInit
    }
}

impl ActionKindGet for WatchedAccountsBlockLedgerQueryPendingAction {
    fn kind(&self) -> ActionKind {
        ActionKind::WatchedAccountsBlockLedgerQueryPending
    }
}

impl ActionKindGet for WatchedAccountsBlockLedgerQuerySuccessAction {
    fn kind(&self) -> ActionKind {
        ActionKind::WatchedAccountsBlockLedgerQuerySuccess
    }
}

impl ActionKindGet for P2pListenNewAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pListenNew
    }
}

impl ActionKindGet for P2pListenExpiredAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pListenExpired
    }
}

impl ActionKindGet for P2pListenErrorAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pListenError
    }
}

impl ActionKindGet for P2pListenClosedAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pListenClosed
    }
}

impl ActionKindGet for P2pConnectionOutgoingAction {
    fn kind(&self) -> ActionKind {
        match self {
            Self::RandomInit(a) => a.kind(),
            Self::Init(a) => a.kind(),
            Self::Reconnect(a) => a.kind(),
            Self::OfferSdpCreatePending(a) => a.kind(),
            Self::OfferSdpCreateError(a) => a.kind(),
            Self::OfferSdpCreateSuccess(a) => a.kind(),
            Self::OfferReady(a) => a.kind(),
            Self::OfferSendSuccess(a) => a.kind(),
            Self::AnswerRecvPending(a) => a.kind(),
            Self::AnswerRecvError(a) => a.kind(),
            Self::AnswerRecvSuccess(a) => a.kind(),
            Self::FinalizePending(a) => a.kind(),
            Self::FinalizeError(a) => a.kind(),
            Self::FinalizeSuccess(a) => a.kind(),
            Self::Timeout(a) => a.kind(),
            Self::Error(a) => a.kind(),
            Self::Success(a) => a.kind(),
        }
    }
}

impl ActionKindGet for P2pConnectionIncomingAction {
    fn kind(&self) -> ActionKind {
        match self {
            Self::Init(a) => a.kind(),
            Self::AnswerSdpCreatePending(a) => a.kind(),
            Self::AnswerSdpCreateError(a) => a.kind(),
            Self::AnswerSdpCreateSuccess(a) => a.kind(),
            Self::AnswerReady(a) => a.kind(),
            Self::AnswerSendSuccess(a) => a.kind(),
            Self::FinalizePending(a) => a.kind(),
            Self::FinalizeError(a) => a.kind(),
            Self::FinalizeSuccess(a) => a.kind(),
            Self::Timeout(a) => a.kind(),
            Self::Error(a) => a.kind(),
            Self::Success(a) => a.kind(),
            Self::Libp2pReceived(a) => a.kind(),
        }
    }
}

impl ActionKindGet for P2pDisconnectionInitAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pDisconnectionInit
    }
}

impl ActionKindGet for P2pDisconnectionFinishAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pDisconnectionFinish
    }
}

impl ActionKindGet for P2pDiscoveryInitAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pDiscoveryInit
    }
}

impl ActionKindGet for P2pDiscoverySuccessAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pDiscoverySuccess
    }
}

impl ActionKindGet for P2pDiscoveryKademliaBootstrapAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pDiscoveryKademliaBootstrap
    }
}

impl ActionKindGet for P2pDiscoveryKademliaInitAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pDiscoveryKademliaInit
    }
}

impl ActionKindGet for P2pDiscoveryKademliaAddRouteAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pDiscoveryKademliaAddRoute
    }
}

impl ActionKindGet for P2pDiscoveryKademliaSuccessAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pDiscoveryKademliaSuccess
    }
}

impl ActionKindGet for P2pDiscoveryKademliaFailureAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pDiscoveryKademliaFailure
    }
}

impl ActionKindGet for P2pChannelsMessageReceivedAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pChannelsMessageReceived
    }
}

impl ActionKindGet for P2pChannelsBestTipAction {
    fn kind(&self) -> ActionKind {
        match self {
            Self::Init { .. } => ActionKind::P2pChannelsBestTipInit,
            Self::Pending { .. } => ActionKind::P2pChannelsBestTipPending,
            Self::Ready { .. } => ActionKind::P2pChannelsBestTipReady,
            Self::RequestSend { .. } => ActionKind::P2pChannelsBestTipRequestSend,
            Self::Received { .. } => ActionKind::P2pChannelsBestTipReceived,
            Self::RequestReceived { .. } => ActionKind::P2pChannelsBestTipRequestReceived,
            Self::ResponseSend { .. } => ActionKind::P2pChannelsBestTipResponseSend,
        }
    }
}

impl ActionKindGet for P2pChannelsSnarkAction {
    fn kind(&self) -> ActionKind {
        match self {
            Self::Init { .. } => ActionKind::P2pChannelsSnarkInit,
            Self::Pending { .. } => ActionKind::P2pChannelsSnarkPending,
            Self::Ready { .. } => ActionKind::P2pChannelsSnarkReady,
            Self::RequestSend { .. } => ActionKind::P2pChannelsSnarkRequestSend,
            Self::PromiseReceived { .. } => ActionKind::P2pChannelsSnarkPromiseReceived,
            Self::Received { .. } => ActionKind::P2pChannelsSnarkReceived,
            Self::RequestReceived { .. } => ActionKind::P2pChannelsSnarkRequestReceived,
            Self::ResponseSend { .. } => ActionKind::P2pChannelsSnarkResponseSend,
            Self::Libp2pReceived { .. } => ActionKind::P2pChannelsSnarkLibp2pReceived,
            Self::Libp2pBroadcast { .. } => ActionKind::P2pChannelsSnarkLibp2pBroadcast,
        }
    }
}

impl ActionKindGet for P2pChannelsSnarkJobCommitmentAction {
    fn kind(&self) -> ActionKind {
        match self {
            Self::Init { .. } => ActionKind::P2pChannelsSnarkJobCommitmentInit,
            Self::Pending { .. } => ActionKind::P2pChannelsSnarkJobCommitmentPending,
            Self::Ready { .. } => ActionKind::P2pChannelsSnarkJobCommitmentReady,
            Self::RequestSend { .. } => ActionKind::P2pChannelsSnarkJobCommitmentRequestSend,
            Self::PromiseReceived { .. } => {
                ActionKind::P2pChannelsSnarkJobCommitmentPromiseReceived
            }
            Self::Received { .. } => ActionKind::P2pChannelsSnarkJobCommitmentReceived,
            Self::RequestReceived { .. } => {
                ActionKind::P2pChannelsSnarkJobCommitmentRequestReceived
            }
            Self::ResponseSend { .. } => ActionKind::P2pChannelsSnarkJobCommitmentResponseSend,
        }
    }
}

impl ActionKindGet for P2pChannelsRpcAction {
    fn kind(&self) -> ActionKind {
        match self {
            Self::Init { .. } => ActionKind::P2pChannelsRpcInit,
            Self::Pending { .. } => ActionKind::P2pChannelsRpcPending,
            Self::Ready { .. } => ActionKind::P2pChannelsRpcReady,
            Self::RequestSend { .. } => ActionKind::P2pChannelsRpcRequestSend,
            Self::Timeout { .. } => ActionKind::P2pChannelsRpcTimeout,
            Self::ResponseReceived { .. } => ActionKind::P2pChannelsRpcResponseReceived,
            Self::RequestReceived { .. } => ActionKind::P2pChannelsRpcRequestReceived,
            Self::ResponseSend { .. } => ActionKind::P2pChannelsRpcResponseSend,
        }
    }
}

impl ActionKindGet for P2pPeerReadyAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pPeerReady
    }
}

impl ActionKindGet for P2pPeerBestTipUpdateAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pPeerBestTipUpdate
    }
}

impl ActionKindGet for P2pNetworkConnectionAction {
    fn kind(&self) -> ActionKind {
        match self {
            Self::InterfaceDetected(a) => a.kind(),
            Self::InterfaceExpired(a) => a.kind(),
            Self::OutgoingDidConnect(a) => a.kind(),
            Self::IncomingDataIsReady(a) => a.kind(),
            Self::IncomingDataDidReceive(a) => a.kind(),
            Self::SelectDone(a) => a.kind(),
            Self::SelectError(a) => a.kind(),
        }
    }
}

impl ActionKindGet for P2pNetworkPnetAction {
    fn kind(&self) -> ActionKind {
        match self {
            Self::IncomingData(a) => a.kind(),
            Self::OutgoingData(a) => a.kind(),
            Self::SetupNonce(a) => a.kind(),
        }
    }
}

impl ActionKindGet for P2pNetworkSelectAction {
    fn kind(&self) -> ActionKind {
        match self {
            Self::Init(a) => a.kind(),
            Self::IncomingData(a) => a.kind(),
            Self::IncomingToken(a) => a.kind(),
        }
    }
}

impl ActionKindGet for P2pNetworkNoiseAction {
    fn kind(&self) -> ActionKind {
        match self {
            Self::Init(a) => a.kind(),
            Self::IncomingData(a) => a.kind(),
        }
    }
}

impl ActionKindGet for TransitionFrontierSyncInitAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncInit
    }
}

impl ActionKindGet for TransitionFrontierSyncBestTipUpdateAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncBestTipUpdate
    }
}

impl ActionKindGet for TransitionFrontierSyncLedgerStakingPendingAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncLedgerStakingPending
    }
}

impl ActionKindGet for TransitionFrontierSyncLedgerStakingSuccessAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncLedgerStakingSuccess
    }
}

impl ActionKindGet for TransitionFrontierSyncLedgerNextEpochPendingAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncLedgerNextEpochPending
    }
}

impl ActionKindGet for TransitionFrontierSyncLedgerNextEpochSuccessAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncLedgerNextEpochSuccess
    }
}

impl ActionKindGet for TransitionFrontierSyncLedgerRootPendingAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncLedgerRootPending
    }
}

impl ActionKindGet for TransitionFrontierSyncLedgerRootSuccessAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncLedgerRootSuccess
    }
}

impl ActionKindGet for TransitionFrontierSyncBlocksPendingAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncBlocksPending
    }
}

impl ActionKindGet for TransitionFrontierSyncBlocksPeersQueryAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncBlocksPeersQuery
    }
}

impl ActionKindGet for TransitionFrontierSyncBlocksPeerQueryInitAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncBlocksPeerQueryInit
    }
}

impl ActionKindGet for TransitionFrontierSyncBlocksPeerQueryRetryAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncBlocksPeerQueryRetry
    }
}

impl ActionKindGet for TransitionFrontierSyncBlocksPeerQueryPendingAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncBlocksPeerQueryPending
    }
}

impl ActionKindGet for TransitionFrontierSyncBlocksPeerQueryErrorAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncBlocksPeerQueryError
    }
}

impl ActionKindGet for TransitionFrontierSyncBlocksPeerQuerySuccessAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncBlocksPeerQuerySuccess
    }
}

impl ActionKindGet for TransitionFrontierSyncBlocksFetchSuccessAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncBlocksFetchSuccess
    }
}

impl ActionKindGet for TransitionFrontierSyncBlocksNextApplyInitAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncBlocksNextApplyInit
    }
}

impl ActionKindGet for TransitionFrontierSyncBlocksNextApplyPendingAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncBlocksNextApplyPending
    }
}

impl ActionKindGet for TransitionFrontierSyncBlocksNextApplySuccessAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncBlocksNextApplySuccess
    }
}

impl ActionKindGet for TransitionFrontierSyncBlocksSuccessAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncBlocksSuccess
    }
}

impl ActionKindGet for TransitionFrontierSyncLedgerAction {
    fn kind(&self) -> ActionKind {
        match self {
            Self::Init(a) => a.kind(),
            Self::Snarked(a) => a.kind(),
            Self::Staged(a) => a.kind(),
            Self::Success(a) => a.kind(),
        }
    }
}

impl ActionKindGet for BlockProducerVrfEvaluatorEpochDataUpdateAction {
    fn kind(&self) -> ActionKind {
        ActionKind::BlockProducerVrfEvaluatorEpochDataUpdate
    }
}

impl ActionKindGet for BlockProducerVrfEvaluatorEvaluateVrfAction {
    fn kind(&self) -> ActionKind {
        ActionKind::BlockProducerVrfEvaluatorEvaluateVrf
    }
}

impl ActionKindGet for BlockProducerVrfEvaluatorEvaluationSuccessAction {
    fn kind(&self) -> ActionKind {
        ActionKind::BlockProducerVrfEvaluatorEvaluationSuccess
    }
}

impl ActionKindGet for BlockProducerVrfEvaluatorUpdateProducerAndDelegatesAction {
    fn kind(&self) -> ActionKind {
        ActionKind::BlockProducerVrfEvaluatorUpdateProducerAndDelegates
    }
}

impl ActionKindGet for BlockProducerVrfEvaluatorUpdateProducerAndDelegatesSuccessAction {
    fn kind(&self) -> ActionKind {
        ActionKind::BlockProducerVrfEvaluatorUpdateProducerAndDelegatesSuccess
    }
}

impl ActionKindGet for P2pConnectionOutgoingRandomInitAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pConnectionOutgoingRandomInit
    }
}

impl ActionKindGet for P2pConnectionOutgoingInitAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pConnectionOutgoingInit
    }
}

impl ActionKindGet for P2pConnectionOutgoingReconnectAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pConnectionOutgoingReconnect
    }
}

impl ActionKindGet for P2pConnectionOutgoingOfferSdpCreatePendingAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pConnectionOutgoingOfferSdpCreatePending
    }
}

impl ActionKindGet for P2pConnectionOutgoingOfferSdpCreateErrorAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pConnectionOutgoingOfferSdpCreateError
    }
}

impl ActionKindGet for P2pConnectionOutgoingOfferSdpCreateSuccessAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pConnectionOutgoingOfferSdpCreateSuccess
    }
}

impl ActionKindGet for P2pConnectionOutgoingOfferReadyAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pConnectionOutgoingOfferReady
    }
}

impl ActionKindGet for P2pConnectionOutgoingOfferSendSuccessAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pConnectionOutgoingOfferSendSuccess
    }
}

impl ActionKindGet for P2pConnectionOutgoingAnswerRecvPendingAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pConnectionOutgoingAnswerRecvPending
    }
}

impl ActionKindGet for P2pConnectionOutgoingAnswerRecvErrorAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pConnectionOutgoingAnswerRecvError
    }
}

impl ActionKindGet for P2pConnectionOutgoingAnswerRecvSuccessAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pConnectionOutgoingAnswerRecvSuccess
    }
}

impl ActionKindGet for P2pConnectionOutgoingFinalizePendingAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pConnectionOutgoingFinalizePending
    }
}

impl ActionKindGet for P2pConnectionOutgoingFinalizeErrorAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pConnectionOutgoingFinalizeError
    }
}

impl ActionKindGet for P2pConnectionOutgoingFinalizeSuccessAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pConnectionOutgoingFinalizeSuccess
    }
}

impl ActionKindGet for P2pConnectionOutgoingTimeoutAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pConnectionOutgoingTimeout
    }
}

impl ActionKindGet for P2pConnectionOutgoingErrorAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pConnectionOutgoingError
    }
}

impl ActionKindGet for P2pConnectionOutgoingSuccessAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pConnectionOutgoingSuccess
    }
}

impl ActionKindGet for P2pConnectionIncomingInitAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pConnectionIncomingInit
    }
}

impl ActionKindGet for P2pConnectionIncomingAnswerSdpCreatePendingAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pConnectionIncomingAnswerSdpCreatePending
    }
}

impl ActionKindGet for P2pConnectionIncomingAnswerSdpCreateErrorAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pConnectionIncomingAnswerSdpCreateError
    }
}

impl ActionKindGet for P2pConnectionIncomingAnswerSdpCreateSuccessAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pConnectionIncomingAnswerSdpCreateSuccess
    }
}

impl ActionKindGet for P2pConnectionIncomingAnswerReadyAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pConnectionIncomingAnswerReady
    }
}

impl ActionKindGet for P2pConnectionIncomingAnswerSendSuccessAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pConnectionIncomingAnswerSendSuccess
    }
}

impl ActionKindGet for P2pConnectionIncomingFinalizePendingAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pConnectionIncomingFinalizePending
    }
}

impl ActionKindGet for P2pConnectionIncomingFinalizeErrorAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pConnectionIncomingFinalizeError
    }
}

impl ActionKindGet for P2pConnectionIncomingFinalizeSuccessAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pConnectionIncomingFinalizeSuccess
    }
}

impl ActionKindGet for P2pConnectionIncomingTimeoutAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pConnectionIncomingTimeout
    }
}

impl ActionKindGet for P2pConnectionIncomingErrorAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pConnectionIncomingError
    }
}

impl ActionKindGet for P2pConnectionIncomingSuccessAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pConnectionIncomingSuccess
    }
}

impl ActionKindGet for P2pConnectionIncomingLibp2pReceivedAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pConnectionIncomingLibp2pReceived
    }
}

impl ActionKindGet for P2pNetworkConnectionInterfaceDetectedAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pNetworkConnectionInterfaceDetected
    }
}

impl ActionKindGet for P2pNetworkConnectionInterfaceExpiredAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pNetworkConnectionInterfaceExpired
    }
}

impl ActionKindGet for P2pNetworkConnectionOutgoingDidConnectAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pNetworkConnectionOutgoingDidConnect
    }
}

impl ActionKindGet for P2pNetworkConnectionIncomingDataIsReadyAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pNetworkConnectionIncomingDataIsReady
    }
}

impl ActionKindGet for P2pNetworkConnectionIncomingDataDidReceiveAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pNetworkConnectionIncomingDataDidReceive
    }
}

impl ActionKindGet for P2pNetworkConnectionSelectDoneAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pNetworkConnectionSelectDone
    }
}

impl ActionKindGet for P2pNetworkConnectionSelectErrorAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pNetworkConnectionSelectError
    }
}

impl ActionKindGet for P2pNetworkPnetIncomingDataAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pNetworkPnetIncomingData
    }
}

impl ActionKindGet for P2pNetworkPnetOutgoingDataAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pNetworkPnetOutgoingData
    }
}

impl ActionKindGet for P2pNetworkPnetSetupNonceAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pNetworkPnetSetupNonce
    }
}

impl ActionKindGet for P2pNetworkSelectInitAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pNetworkSelectInit
    }
}

impl ActionKindGet for P2pNetworkSelectIncomingDataAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pNetworkSelectIncomingData
    }
}

impl ActionKindGet for P2pNetworkSelectIncomingTokenAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pNetworkSelectIncomingToken
    }
}

impl ActionKindGet for P2pNetworkNoiseInitAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pNetworkNoiseInit
    }
}

impl ActionKindGet for P2pNetworkNoiseIncomingDataAction {
    fn kind(&self) -> ActionKind {
        ActionKind::P2pNetworkNoiseIncomingData
    }
}

impl ActionKindGet for TransitionFrontierSyncLedgerInitAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncLedgerInit
    }
}

impl ActionKindGet for TransitionFrontierSyncLedgerSnarkedAction {
    fn kind(&self) -> ActionKind {
        match self {
            Self::Pending(a) => a.kind(),
            Self::PeersQuery(a) => a.kind(),
            Self::PeerQueryInit(a) => a.kind(),
            Self::PeerQueryPending(a) => a.kind(),
            Self::PeerQueryRetry(a) => a.kind(),
            Self::PeerQueryError(a) => a.kind(),
            Self::PeerQuerySuccess(a) => a.kind(),
            Self::ChildHashesReceived(a) => a.kind(),
            Self::ChildAccountsReceived(a) => a.kind(),
            Self::Success(a) => a.kind(),
        }
    }
}

impl ActionKindGet for TransitionFrontierSyncLedgerStagedAction {
    fn kind(&self) -> ActionKind {
        match self {
            Self::PartsFetchPending(a) => a.kind(),
            Self::PartsPeerFetchInit(a) => a.kind(),
            Self::PartsPeerFetchPending(a) => a.kind(),
            Self::PartsPeerFetchError(a) => a.kind(),
            Self::PartsPeerFetchSuccess(a) => a.kind(),
            Self::PartsPeerInvalid(a) => a.kind(),
            Self::PartsPeerValid(a) => a.kind(),
            Self::PartsFetchSuccess(a) => a.kind(),
            Self::ReconstructEmpty(a) => a.kind(),
            Self::ReconstructInit(a) => a.kind(),
            Self::ReconstructPending(a) => a.kind(),
            Self::ReconstructError(a) => a.kind(),
            Self::ReconstructSuccess(a) => a.kind(),
            Self::Success(a) => a.kind(),
        }
    }
}

impl ActionKindGet for TransitionFrontierSyncLedgerSuccessAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncLedgerSuccess
    }
}

impl ActionKindGet for TransitionFrontierSyncLedgerSnarkedPendingAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncLedgerSnarkedPending
    }
}

impl ActionKindGet for TransitionFrontierSyncLedgerSnarkedPeersQueryAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncLedgerSnarkedPeersQuery
    }
}

impl ActionKindGet for TransitionFrontierSyncLedgerSnarkedPeerQueryInitAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncLedgerSnarkedPeerQueryInit
    }
}

impl ActionKindGet for TransitionFrontierSyncLedgerSnarkedPeerQueryPendingAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncLedgerSnarkedPeerQueryPending
    }
}

impl ActionKindGet for TransitionFrontierSyncLedgerSnarkedPeerQueryRetryAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncLedgerSnarkedPeerQueryRetry
    }
}

impl ActionKindGet for TransitionFrontierSyncLedgerSnarkedPeerQueryErrorAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncLedgerSnarkedPeerQueryError
    }
}

impl ActionKindGet for TransitionFrontierSyncLedgerSnarkedPeerQuerySuccessAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncLedgerSnarkedPeerQuerySuccess
    }
}

impl ActionKindGet for TransitionFrontierSyncLedgerSnarkedChildHashesReceivedAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncLedgerSnarkedChildHashesReceived
    }
}

impl ActionKindGet for TransitionFrontierSyncLedgerSnarkedChildAccountsReceivedAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncLedgerSnarkedChildAccountsReceived
    }
}

impl ActionKindGet for TransitionFrontierSyncLedgerSnarkedSuccessAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncLedgerSnarkedSuccess
    }
}

impl ActionKindGet for TransitionFrontierSyncLedgerStagedPartsFetchPendingAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncLedgerStagedPartsFetchPending
    }
}

impl ActionKindGet for TransitionFrontierSyncLedgerStagedPartsPeerFetchInitAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncLedgerStagedPartsPeerFetchInit
    }
}

impl ActionKindGet for TransitionFrontierSyncLedgerStagedPartsPeerFetchPendingAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncLedgerStagedPartsPeerFetchPending
    }
}

impl ActionKindGet for TransitionFrontierSyncLedgerStagedPartsPeerFetchErrorAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncLedgerStagedPartsPeerFetchError
    }
}

impl ActionKindGet for TransitionFrontierSyncLedgerStagedPartsPeerFetchSuccessAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncLedgerStagedPartsPeerFetchSuccess
    }
}

impl ActionKindGet for TransitionFrontierSyncLedgerStagedPartsPeerInvalidAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncLedgerStagedPartsPeerInvalid
    }
}

impl ActionKindGet for TransitionFrontierSyncLedgerStagedPartsPeerValidAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncLedgerStagedPartsPeerValid
    }
}

impl ActionKindGet for TransitionFrontierSyncLedgerStagedPartsFetchSuccessAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncLedgerStagedPartsFetchSuccess
    }
}

impl ActionKindGet for TransitionFrontierSyncLedgerStagedReconstructEmptyAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncLedgerStagedReconstructEmpty
    }
}

impl ActionKindGet for TransitionFrontierSyncLedgerStagedReconstructInitAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncLedgerStagedReconstructInit
    }
}

impl ActionKindGet for TransitionFrontierSyncLedgerStagedReconstructPendingAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncLedgerStagedReconstructPending
    }
}

impl ActionKindGet for TransitionFrontierSyncLedgerStagedReconstructErrorAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncLedgerStagedReconstructError
    }
}

impl ActionKindGet for TransitionFrontierSyncLedgerStagedReconstructSuccessAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncLedgerStagedReconstructSuccess
    }
}

impl ActionKindGet for TransitionFrontierSyncLedgerStagedSuccessAction {
    fn kind(&self) -> ActionKind {
        ActionKind::TransitionFrontierSyncLedgerStagedSuccess
    }
}
