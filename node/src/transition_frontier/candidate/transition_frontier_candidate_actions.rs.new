//! Defines actions for managing candidate blocks in the transition frontier,
//! including receiving, validating, and verifying blocks.

use mina_p2p_messages::v2::StateHash;
use openmina_core::block::prevalidate::BlockPrevalidationError;
use openmina_core::block::ArcBlockWithHash;
use openmina_core::consensus::consensus_take;
use openmina_core::{action_event, ActionEvent};
use serde::{Deserialize, Serialize};
use snark::block_verify::SnarkBlockVerifyError;

use crate::snark::block_verify::SnarkBlockVerifyId;

pub type TransitionFrontierCandidateActionWithMeta =
    redux::ActionWithMeta<TransitionFrontierCandidateAction>;
pub type TransitionFrontierCandidateActionWithMetaRef<'a> =
    redux::ActionWithMeta<&'a TransitionFrontierCandidateAction>;

// NOTE: `debug(hash)` must be used instead of `display(hash)` because
// for some reason the later breaks CI. `hash = display(&hash)` works too.
/// Actions for managing candidate blocks in the transition frontier.
#[derive(Serialize, Deserialize, Debug, Clone, ActionEvent)]
#[action_event(level = debug, fields(debug(hash), debug(error)))]
pub enum TransitionFrontierCandidateAction {
