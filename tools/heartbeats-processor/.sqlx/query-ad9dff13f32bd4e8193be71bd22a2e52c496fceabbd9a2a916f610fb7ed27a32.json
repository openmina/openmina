{
  "db_name": "SQLite",
  "query": "\n        WITH ValidWindows AS (\n            SELECT id, start_time, end_time\n            FROM time_windows\n            WHERE disabled = FALSE\n            AND end_time <= ?2\n            AND start_time >= ?1\n        ),\n        BlockCounts AS (\n            -- Count one block per global slot per producer\n            SELECT\n                public_key_id,\n                COUNT(DISTINCT block_global_slot) as blocks\n            FROM (\n                -- Deduplicate blocks per global slot\n                SELECT\n                    pb.public_key_id,\n                    pb.block_global_slot\n                FROM produced_blocks pb\n                JOIN ValidWindows vw ON vw.id = pb.window_id\n                -- TODO: enable once block proof validation has been implemented\n                -- WHERE pb.validated = TRUE\n                GROUP BY pb.public_key_id, pb.block_global_slot\n            ) unique_blocks\n            GROUP BY public_key_id\n        ),\n        HeartbeatCounts AS (\n            -- Count heartbeats only within valid windows and not disabled\n            SELECT\n                hp.public_key_id,\n                COUNT(DISTINCT hp.window_id) as heartbeats\n            FROM heartbeat_presence hp\n            JOIN ValidWindows vw ON vw.id = hp.window_id\n            WHERE hp.disabled = FALSE\n            GROUP BY hp.public_key_id\n        ),\n        LastHeartbeats AS (\n            -- Get last heartbeat time across all windows, including disabled entries\n            SELECT\n                public_key_id,\n                MAX(heartbeat_time) as last_heartbeat\n            FROM heartbeat_presence\n            GROUP BY public_key_id\n        )\n        INSERT INTO submitter_scores (\n            public_key_id,\n            score,\n            blocks_produced,\n            last_heartbeat\n        )\n        SELECT\n            pk.id,\n            COALESCE(hc.heartbeats, 0) as score,\n            COALESCE(bc.blocks, 0) as blocks_produced,\n            COALESCE(lh.last_heartbeat, 0) as last_heartbeat\n        FROM public_keys pk\n        LEFT JOIN HeartbeatCounts hc ON hc.public_key_id = pk.id\n        LEFT JOIN BlockCounts bc ON bc.public_key_id = pk.id\n        LEFT JOIN LastHeartbeats lh ON lh.public_key_id = pk.id\n        WHERE hc.heartbeats > 0 OR bc.blocks > 0\n        ON CONFLICT(public_key_id) DO UPDATE SET\n            score = excluded.score,\n            blocks_produced = excluded.blocks_produced,\n            last_heartbeat = excluded.last_heartbeat,\n            last_updated = strftime('%s', 'now')\n        ",
  "describe": {
    "columns": [],
    "parameters": {
      "Right": 2
    },
    "nullable": []
  },
  "hash": "ad9dff13f32bd4e8193be71bd22a2e52c496fceabbd9a2a916f610fb7ed27a32"
}
