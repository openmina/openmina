name: Openmina CI
on:
  push:
    branches: [ main, develop ]
  pull_request:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  RUST_MIN_STACK: 10000000

jobs:
  ledger-tests:
    runs-on: ubuntu-20.04
    env:
      CARGO_TERM_COLOR: always
    steps:
      - name: Git checkout
        uses: actions/checkout@v4
      - name: Setup build dependencies
        run: |
          sudo apt update
          sudo apt install -y protobuf-compiler
      - name: Setup Rust
        run: |
          # Nightly to be able to use `--report-time` below
          rustup install nightly
          rustup override set nightly
      - name: Download circuits files
        run: |
          git clone --depth 1 https://github.com/openmina/circuit-blobs.git
          ln -s -b $PWD/circuit-blobs/* ledger/
      - name: Build ledger tests
        run: |
          cd ledger
          cargo build --release --tests
      - name: Run ledger tests
        run: |
          cd ledger
          cargo test --release -- -Z unstable-options --report-time

  p2p-tests:
    runs-on: ubuntu-20.04
    steps:
      - name: Git checkout
        uses: actions/checkout@v4

      - name: Setup build dependencies
        run: |
          sudo apt update
          sudo apt install -y protobuf-compiler

      - name: Setup Rust
        run: |
          rustup default 1.77
          rustup component add rustfmt

      - name: Setup Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "v0"

      - name: Test p2p crate
        run: |
          cargo test -p p2p --tests


  build:
    runs-on: ubuntu-20.04
    steps:
      - name: Git checkout
        uses: actions/checkout@v4

      - name: Setup build dependencies
        run: |
          sudo apt update
          sudo apt install -y protobuf-compiler

      - name: Setup Rust
        run: |
          rustup default 1.77
          rustup component add rustfmt

      - name: Setup Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "v0"

      - name: Release build
        run: |
          cargo build --release --bin openmina

      - name: Upload binaries
        uses: actions/upload-artifact@v4
        with:
          name: bin
          path: target/release/openmina

  build-tests:
    runs-on: ubuntu-20.04
    steps:
      - name: Git checkout
        uses: actions/checkout@v4

      - name: Setup build dependencies
        run: |
          sudo apt update
          sudo apt install -y protobuf-compiler

      - name: Setup Rust
        run: |
          rustup default 1.77
          rustup component add rustfmt

      - name: Setup Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "v0"

      - name: Build tests
        run: |
          mkdir -p target/release/tests

          cargo build --release --features=scenario-generators --package=openmina-node-testing --tests
          cargo build --release --features=scenario-generators --package=openmina-node-testing --tests --message-format=json > cargo-build-test.json
          jq -r '. | select(.executable != null and (.target.kind | (contains(["test"])))) | [.target.name, .executable ] | @tsv' cargo-build-test.json > tests.tsv
          while read NAME FILE; do cp -a $FILE target/release/tests/$NAME; done < tests.tsv

      - name: Upload tests
        uses: actions/upload-artifact@v4
        with:
          name: tests
          path: target/release/tests

  build-tests-webrtc:
    runs-on: ubuntu-20.04
    if: false
    steps:
      - name: Git checkout
        uses: actions/checkout@v4

      - name: Setup build dependencies
        run: |
          sudo apt update
          sudo apt install -y protobuf-compiler

      - name: Setup Rust
        run: |
          rustup default 1.77
          rustup component add rustfmt

      - name: Setup Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "v0"

      - name: Build tests
        run: |
          mkdir -p target/release/tests

          cargo build --release --features=scenario-generators,p2p-webrtc --package=openmina-node-testing --tests
          cargo build --release --features=scenario-generators,p2p-webrtc --package=openmina-node-testing --tests --message-format=json > cargo-build-test.json
          jq -r '. | select(.executable != null and (.target.kind | (contains(["test"])))) | [.target.name, .executable ] | @tsv' cargo-build-test.json > tests.tsv
          while read NAME FILE; do cp -a $FILE target/release/tests/webrtc_$NAME; done < tests.tsv

      - name: Upload tests
        uses: actions/upload-artifact@v4
        with:
          name: tests-webrct
          path: target/release/tests

  p2p-scenario-tests:
    needs: [ build-tests ]
    runs-on: ubuntu-20.04
    container:
      image: minaprotocol/mina-daemon:2.0.0berkeley-rc1-1551e2f-focal-berkeley
    strategy:
      matrix:
        test: [p2p_basic_connections, p2p_basic_incoming, p2p_basic_outgoing, p2p_pubsub]
      fail-fast: false

    steps:
      - name: Download tests
        uses: actions/download-artifact@v4
        with:
          name: tests

      - name: Setup permissions
        run: |
          chmod +x ./${{ matrix.test }}

      - name: Run the test
        run: |
          ./${{ matrix.test }} --test-threads=1

  k8s-peers:
    runs-on: ubuntu-20.04
    # TODO: query cluster for actual addresses, or specify then on deployment
    env:
      PEERS: |
        /ip4/135.181.217.23/tcp/31881/p2p/12D3KooWKiKQkUTTZ6u8HDk471ZQE2vStpEDnySiKDrYgZGfEcsF
        /ip4/135.181.217.23/tcp/30386/p2p/12D3KooWBHknA3ty2tk4u3N6Rwnjs5YwYaxHT9dURf7zGeBJ4VJG
        /ip4/135.181.217.23/tcp/32272/p2p/12D3KooWDZDH6ucaZY4bU2R8Xy9T1iy4PGtaZ8vEWeuGEeLaQEg5
        /ip4/135.181.217.23/tcp/32218/p2p/12D3KooWMenq7gPcF7utkZao8WLtjMqsZkY7LeLD1Y9q9YyQZnkG
        /ip4/135.181.217.23/tcp/30798/p2p/12D3KooWMMsF7dYbn4Szf7TvrRofuK53W3zj6TDKgxAFSWYypLsB
        /ip4/135.181.217.23/tcp/31631/p2p/12D3KooWNeaaS6wpPSa41qkxQWaeauDR51WCNnLUyd5CcjBBiNTq
        /ip4/135.181.217.23/tcp/30196/p2p/12D3KooWCBTaSVMxDT1SUoeSg3PUsVL1Df1hDxkSvN544i7tsE76
        /ip4/135.181.217.23/tcp/30790/p2p/12D3KooWG7egucvX5sompG2euhaPL4QQ3BdHJrLS7HGWyiHyoD5y
        /ip4/135.181.217.23/tcp/30070/p2p/12D3KooWFG5dhmgS6rb8NdoNbiK7Vf6TqTQDTYxq18DVkmPwsgfg
    outputs:
      peers: ${{ steps.peers.outputs.peers }}
    steps:
      - id: peers
        name: Fetch k8s OCaml peers
        run: |
          {
            echo 'peers<<EOF'
            echo $PEERS
            echo EOF
          } >> "$GITHUB_OUTPUT"

  scenario-tests:
    needs:
      - k8s-peers
      - build-tests
    #  - build-tests-webrtc
    runs-on: ubuntu-20.04
    container:
      image: minaprotocol/mina-daemon:2.0.0berkeley-rc1-1551e2f-focal-berkeley
    env:
      # to allow local addrs discovery
      OPENMINA_DISCOVERY_FILTER_ADDR: false
      OPENMINA_SCENARIO_SEEDS: ${{ needs.k8s-peers.outputs.peers }}
    strategy:
      matrix:
        test:
          - single_node
          - multi_node
          # - webrtc_single_node
          # - webrtc_multi_node
          # - connection_discovery
      fail-fast: false

    steps:
      - name: Download tests
        uses: actions/download-artifact@v4
        with:
          pattern: tests*
          merge-multiple: true

      - name: Setup permissions
        run: |
          chmod +x ./${{ matrix.test }}

      - name: Run the test
        run: |
          ./${{ matrix.test }} --test-threads=1


  bootstrap-test:
    needs: [ k8s-peers, build ]
    runs-on: ubuntu-20.04
    env:
      PEERS: ${{ needs.k8s-peers.outputs.peers }}
    steps:
      - name: Download binary
        uses: actions/download-artifact@v4
        with:
          name: bin

      - name: Bootstrap node
        run: |
          set -eu
          chmod +x ./openmina
          ./openmina node --no-peers-discovery --peers $PEERS 2>&1 | tee run.log &
          PID=$!
          TIME=10
          SLEEP=10
          ATTEMPTS=$((TIME * 60 / SLEEP))

          healthy() {
            curl -fs -m 5 localhost:3000/healthz
          }

          ready() {
            curl -fs -m 5 localhost:3000/readyz
          }

          ready3() {
            ready && sleep 10 && ready && sleep 10 && ready
          }

          while ! healthy; do
              echo "::notice::The node is not healthy yet"
              ATTEMPTS=$((ATTEMPTS-1))
              if [ "${ATTEMPTS}" -eq 0 ]; then
                  echo "::error::Cannot bootsrtap within $TIME minutes"
                  exit 1
              fi
              sleep $SLEEP
          done
          echo "::notice::The node is healthy"

          while ! ready3; do
              echo "::notice::The node is not bootstrapped yet"
              ATTEMPTS=$((ATTEMPTS-1))
              if [ "${ATTEMPTS}" -eq 0 ]; then
                  echo "::error::Cannot bootsrtap within $TIME minutes"
                  exit 1
              fi
              sleep $SLEEP
          done
          echo "::notice::The node is bootstrapped"

      - name: Upload run.log
        uses: actions/upload-artifact@v4
        with:
          name: bootstrap-log
          path: run.log
        if: ${{ failure() }}
